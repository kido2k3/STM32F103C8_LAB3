
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d8  080027d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027d8  080027d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d8  080027d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080027ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080027ec  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008608  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e9  00000000  00000000  00028680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076f  00000000  00000000  0002aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bb3  00000000  00000000  0002b197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afa1  00000000  00000000  00041d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084260  00000000  00000000  0004cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002848  00000000  00000000  000d0f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d3794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800279c 	.word	0x0800279c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800279c 	.word	0x0800279c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <button_init>:
	uint16_t pin;
} button[NUMBER_OF_BUTTON];



void button_init(void) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e04f      	b.n	80009d4 <button_init+0xac>
		button[i].reg[0] = button[i].reg[1] = button[i].reg[2] = RELEASE;
 8000934:	492e      	ldr	r1, [pc, #184]	; (80009f0 <button_init+0xc8>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3302      	adds	r3, #2
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	4929      	ldr	r1, [pc, #164]	; (80009f0 <button_init+0xc8>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	3302      	adds	r3, #2
 8000958:	7818      	ldrb	r0, [r3, #0]
 800095a:	4925      	ldr	r1, [pc, #148]	; (80009f0 <button_init+0xc8>)
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	3301      	adds	r3, #1
 800096a:	4602      	mov	r2, r0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	4920      	ldr	r1, [pc, #128]	; (80009f0 <button_init+0xc8>)
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	3301      	adds	r3, #1
 800097e:	7818      	ldrb	r0, [r3, #0]
 8000980:	491b      	ldr	r1, [pc, #108]	; (80009f0 <button_init+0xc8>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	4602      	mov	r2, r0
 8000990:	701a      	strb	r2, [r3, #0]
		button[i].is_long_pressed = 0;
 8000992:	4917      	ldr	r1, [pc, #92]	; (80009f0 <button_init+0xc8>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3304      	adds	r3, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		button[i].is_pressed = 0;
 80009a6:	4912      	ldr	r1, [pc, #72]	; (80009f0 <button_init+0xc8>)
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	3303      	adds	r3, #3
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		button[i].timer = LONG_PRESSED_TIME;
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <button_init+0xc8>)
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3308      	adds	r3, #8
 80009ca:	22c8      	movs	r2, #200	; 0xc8
 80009cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3301      	adds	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	ddac      	ble.n	8000934 <button_init+0xc>
	}
	// port and pin were matched by hand
	button[0].port = BUTTON_1_PORT;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <button_init+0xc8>)
 80009dc:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <button_init+0xcc>)
 80009de:	60da      	str	r2, [r3, #12]
	button[0].pin = BUTTON_1;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <button_init+0xc8>)
 80009e2:	2220      	movs	r2, #32
 80009e4:	821a      	strh	r2, [r3, #16]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000028 	.word	0x20000028
 80009f4:	40010800 	.word	0x40010800

080009f8 <button_read>:
void button_read(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e0c4      	b.n	8000b8e <button_read+0x196>
		button[i].reg[0] = button[i].reg[1];
 8000a04:	4966      	ldr	r1, [pc, #408]	; (8000ba0 <button_read+0x1a8>)
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	440b      	add	r3, r1
 8000a12:	3301      	adds	r3, #1
 8000a14:	7818      	ldrb	r0, [r3, #0]
 8000a16:	4962      	ldr	r1, [pc, #392]	; (8000ba0 <button_read+0x1a8>)
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	4602      	mov	r2, r0
 8000a26:	701a      	strb	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 8000a28:	495d      	ldr	r1, [pc, #372]	; (8000ba0 <button_read+0x1a8>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3302      	adds	r3, #2
 8000a38:	7818      	ldrb	r0, [r3, #0]
 8000a3a:	4959      	ldr	r1, [pc, #356]	; (8000ba0 <button_read+0x1a8>)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	701a      	strb	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(BUTTON_1_PORT, BUTTON_1);
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4854      	ldr	r0, [pc, #336]	; (8000ba4 <button_read+0x1ac>)
 8000a52:	f000 fe53 	bl	80016fc <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	4951      	ldr	r1, [pc, #324]	; (8000ba0 <button_read+0x1a8>)
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3302      	adds	r3, #2
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	701a      	strb	r2, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000a6e:	494c      	ldr	r1, [pc, #304]	; (8000ba0 <button_read+0x1a8>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	7819      	ldrb	r1, [r3, #0]
 8000a7e:	4848      	ldr	r0, [pc, #288]	; (8000ba0 <button_read+0x1a8>)
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4299      	cmp	r1, r3
 8000a92:	d179      	bne.n	8000b88 <button_read+0x190>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000a94:	4942      	ldr	r1, [pc, #264]	; (8000ba0 <button_read+0x1a8>)
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	7819      	ldrb	r1, [r3, #0]
 8000aa6:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <button_read+0x1a8>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4403      	add	r3, r0
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d165      	bne.n	8000b88 <button_read+0x190>
			if (button[i].reg[2] == PRESSED) {
 8000abc:	4938      	ldr	r1, [pc, #224]	; (8000ba0 <button_read+0x1a8>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3302      	adds	r3, #2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d133      	bne.n	8000b3a <button_read+0x142>
				button[i].is_pressed = 1;
 8000ad2:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <button_read+0x1a8>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3303      	adds	r3, #3
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
				if (button[i].timer > 0) {
 8000ae6:	492e      	ldr	r1, [pc, #184]	; (8000ba0 <button_read+0x1a8>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	3308      	adds	r3, #8
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d013      	beq.n	8000b24 <button_read+0x12c>
					button[i].timer--;
 8000afc:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <button_read+0x1a8>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1e59      	subs	r1, r3, #1
 8000b10:	4823      	ldr	r0, [pc, #140]	; (8000ba0 <button_read+0x1a8>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4403      	add	r3, r0
 8000b1e:	3308      	adds	r3, #8
 8000b20:	6019      	str	r1, [r3, #0]
 8000b22:	e031      	b.n	8000b88 <button_read+0x190>
				} else {
					button[i].is_long_pressed = 1;
 8000b24:	491e      	ldr	r1, [pc, #120]	; (8000ba0 <button_read+0x1a8>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3304      	adds	r3, #4
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e026      	b.n	8000b88 <button_read+0x190>
				}
			} else {
				button[i].is_long_pressed = button[i].is_pressed = 0;
 8000b3a:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <button_read+0x1a8>)
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	3303      	adds	r3, #3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	4914      	ldr	r1, [pc, #80]	; (8000ba0 <button_read+0x1a8>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3303      	adds	r3, #3
 8000b5e:	7818      	ldrb	r0, [r3, #0]
 8000b60:	490f      	ldr	r1, [pc, #60]	; (8000ba0 <button_read+0x1a8>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3304      	adds	r3, #4
 8000b70:	4602      	mov	r2, r0
 8000b72:	701a      	strb	r2, [r3, #0]
				button[i].timer = LONG_PRESSED_TIME;
 8000b74:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <button_read+0x1a8>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3308      	adds	r3, #8
 8000b84:	22c8      	movs	r2, #200	; 0xc8
 8000b86:	601a      	str	r2, [r3, #0]
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f43f af37 	beq.w	8000a04 <button_read+0xc>
			}
		}
	}
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <is_button_pressed>:

bool is_button_pressed(unsigned i) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <is_button_pressed+0x12>
		return ERROR;
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	e008      	b.n	8000bcc <is_button_pressed+0x24>
	return button[i].is_pressed;
 8000bba:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <is_button_pressed+0x30>)
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3303      	adds	r3, #3
 8000bca:	781b      	ldrb	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000028 	.word	0x20000028

08000bdc <is_button_long_pressed>:

bool is_button_long_pressed(unsigned i) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <is_button_long_pressed+0x12>
		return ERROR;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	e008      	b.n	8000c00 <is_button_long_pressed+0x24>
	return button[i].is_long_pressed;
 8000bee:	4907      	ldr	r1, [pc, #28]	; (8000c0c <is_button_long_pressed+0x30>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000028 	.word	0x20000028

08000c10 <button_fsm>:

enum {
	release, pressed, long_pressed
} button_st;

bool button_fsm(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	switch (button_st) {
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <button_fsm+0xbc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d036      	beq.n	8000c8a <button_fsm+0x7a>
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	dc4c      	bgt.n	8000cba <button_fsm+0xaa>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <button_fsm+0x1a>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d016      	beq.n	8000c56 <button_fsm+0x46>
 8000c28:	e047      	b.n	8000cba <button_fsm+0xaa>
	case release:
		if (is_button_pressed(0) == 1) {
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ffbc 	bl	8000ba8 <is_button_pressed>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d107      	bne.n	8000c46 <button_fsm+0x36>
			// to do
			HAL_GPIO_TogglePin(LED1_PORT, LED1);
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <button_fsm+0xc0>)
 8000c3a:	f000 fd8e 	bl	800175a <HAL_GPIO_TogglePin>
			button_st = pressed;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <button_fsm+0xbc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8000c44:	e03b      	b.n	8000cbe <button_fsm+0xae>
		} else if (is_button_pressed(0) == ERROR)
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff ffae 	bl	8000ba8 <is_button_pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d135      	bne.n	8000cbe <button_fsm+0xae>
			return 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e037      	b.n	8000cc6 <button_fsm+0xb6>
	case pressed:
		if (!is_button_pressed(0)) {
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ffa6 	bl	8000ba8 <is_button_pressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <button_fsm+0x5a>
			button_st = release;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <button_fsm+0xbc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
			set_timer(1, TOGGLE_TIME);
			button_st = long_pressed;
		} else {
			return 0;
		}
		break;
 8000c68:	e02c      	b.n	8000cc4 <button_fsm+0xb4>
		} else if (is_button_long_pressed(0) == 1) {
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ffb6 	bl	8000bdc <is_button_long_pressed>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d107      	bne.n	8000c86 <button_fsm+0x76>
			set_timer(1, TOGGLE_TIME);
 8000c76:	21fa      	movs	r1, #250	; 0xfa
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 f925 	bl	8000ec8 <set_timer>
			button_st = long_pressed;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <button_fsm+0xbc>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	701a      	strb	r2, [r3, #0]
		break;
 8000c84:	e01e      	b.n	8000cc4 <button_fsm+0xb4>
			return 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e01d      	b.n	8000cc6 <button_fsm+0xb6>
	case long_pressed:
		// to do
		if(!is_timer_on(1)){
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 f97a 	bl	8000f84 <is_timer_on>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d107      	bne.n	8000ca6 <button_fsm+0x96>
			HAL_GPIO_TogglePin(LED1_PORT, LED1);
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <button_fsm+0xc0>)
 8000c9a:	f000 fd5e 	bl	800175a <HAL_GPIO_TogglePin>
			set_timer(1, TOGGLE_TIME);
 8000c9e:	21fa      	movs	r1, #250	; 0xfa
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 f911 	bl	8000ec8 <set_timer>
		}
		if (!is_button_pressed(0)) {
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff7e 	bl	8000ba8 <is_button_pressed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d107      	bne.n	8000cc2 <button_fsm+0xb2>
			button_st = release;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <button_fsm+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cb8:	e003      	b.n	8000cc2 <button_fsm+0xb2>
	default:
		return 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e003      	b.n	8000cc6 <button_fsm+0xb6>
		break;
 8000cbe:	bf00      	nop
 8000cc0:	e000      	b.n	8000cc4 <button_fsm+0xb4>
		break;
 8000cc2:	bf00      	nop
		break;
	}
	return 1;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000003c 	.word	0x2000003c
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cd8:	f000 fa1c 	bl	8001114 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cdc:	f000 f81e 	bl	8000d1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ce0:	f000 f8a4 	bl	8000e2c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000ce4:	f000 f856 	bl	8000d94 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <main+0x44>)
 8000cea:	f001 f97d 	bl	8001fe8 <HAL_TIM_Base_Start_IT>
	set_timer(0, READ_BUTTON_TIME);
 8000cee:	210a      	movs	r1, #10
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 f8e9 	bl	8000ec8 <set_timer>
	button_init();
 8000cf6:	f7ff fe17 	bl	8000928 <button_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		button_fsm();
 8000cfa:	f7ff ff89 	bl	8000c10 <button_fsm>
		if (!is_timer_on(0)) {
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f940 	bl	8000f84 <is_timer_on>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f7      	bne.n	8000cfa <main+0x26>
			button_read();
 8000d0a:	f7ff fe75 	bl	80009f8 <button_read>
			set_timer(0, READ_BUTTON_TIME);
 8000d0e:	210a      	movs	r1, #10
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 f8d9 	bl	8000ec8 <set_timer>
		button_fsm();
 8000d16:	e7f0      	b.n	8000cfa <main+0x26>
 8000d18:	20000040 	.word	0x20000040

08000d1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	; 0x40
 8000d20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	2228      	movs	r2, #40	; 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fd0a 	bl	8002744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	2310      	movs	r3, #16
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fd1a 	bl	800178c <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x46>
		Error_Handler();
 8000d5e:	f000 f8a3 	bl	8000ea8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 ff88 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x6e>
		Error_Handler();
 8000d86:	f000 f88f 	bl	8000ea8 <Error_Handler>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3740      	adds	r7, #64	; 0x40
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dba:	224f      	movs	r2, #79	; 0x4f
 8000dbc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dc6:	2263      	movs	r2, #99	; 0x63
 8000dc8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000dd8:	f001 f8b6 	bl	8001f48 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x52>
		Error_Handler();
 8000de2:	f000 f861 	bl	8000ea8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000df4:	f001 fa52 	bl	800229c <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM2_Init+0x6e>
		Error_Handler();
 8000dfe:	f000 f853 	bl	8000ea8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM2_Init+0x94>)
 8000e10:	f001 fc28 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000e1a:	f000 f845 	bl	8000ea8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000040 	.word	0x20000040

08000e2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_GPIO_Init+0x74>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_GPIO_Init+0x74>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_GPIO_Init+0x74>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <MX_GPIO_Init+0x78>)
 8000e5e:	f000 fc64 	bl	800172a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e62:	2320      	movs	r3, #32
 8000e64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <MX_GPIO_Init+0x78>)
 8000e76:	f000 fabd 	bl	80013f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_GPIO_Init+0x78>)
 8000e92:	f000 faaf 	bl	80013f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>

08000eb2 <HAL_TIM_PeriodElapsedCallback>:
	unsigned int count;
} timer[2];
/* timer[0]: to read button
 * timer[1]: to toggle led when being long pressed
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	run_timer();
 8000eba:	f000 f831 	bl	8000f20 <run_timer>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <set_timer>:
//time unit is ms
void set_timer(unsigned i, unsigned int time) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed8:	fb02 f303 	mul.w	r3, r2, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fa77 	bl	80003d0 <__aeabi_ui2d>
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <set_timer+0x50>)
 8000ee8:	f7ff fc16 	bl	8000718 <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fcf8 	bl	80008e8 <__aeabi_d2uiz>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <set_timer+0x54>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <set_timer+0x54>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	408f4000 	.word	0x408f4000
 8000f1c:	20000088 	.word	0x20000088

08000f20 <run_timer>:
void run_timer(void) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < 2; i++) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e01f      	b.n	8000f6c <run_timer+0x4c>
		if (timer[i].state) {
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <run_timer+0x60>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d016      	beq.n	8000f66 <run_timer+0x46>
			timer[i].count--;
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <run_timer+0x60>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	490e      	ldr	r1, [pc, #56]	; (8000f80 <run_timer+0x60>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <run_timer+0x60>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4413      	add	r3, r2
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d104      	bne.n	8000f66 <run_timer+0x46>
				timer[i].state = 0;
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <run_timer+0x60>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2100      	movs	r1, #0
 8000f62:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < 2; i++) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d9dc      	bls.n	8000f2c <run_timer+0xc>
			}
		}
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000088 	.word	0x20000088

08000f84 <is_timer_on>:
bool is_timer_on(unsigned i) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <is_timer_on+0x24>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000088 	.word	0x20000088

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_MspInit+0x5c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x5c>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x60>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_MspInit+0x60>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001020:	d113      	bne.n	800104a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_TIM_Base_MspInit+0x44>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_TIM_Base_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_TIM_Base_MspInit+0x44>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	201c      	movs	r0, #28
 8001040:	f000 f9a1 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001044:	201c      	movs	r0, #28
 8001046:	f000 f9ba 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f87f 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM2_IRQHandler+0x10>)
 80010ae:	f000 ffed 	bl	800208c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000040 	.word	0x20000040

080010bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff fff8 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ce:	490c      	ldr	r1, [pc, #48]	; (8001100 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010e4:	4c09      	ldr	r4, [pc, #36]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f001 fb2f 	bl	8002754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fded 	bl	8000cd4 <main>
  bx lr
 80010fa:	4770      	bx	lr
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001104:	080027e0 	.word	0x080027e0
  ldr r2, =_sbss
 8001108:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800110c:	2000009c 	.word	0x2000009c

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x28>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f923 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff ff3c 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f93b 	bl	80013da <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f903 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_IncTick+0x20>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000098 	.word	0x20000098

080011c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000098 	.word	0x20000098

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4906      	ldr	r1, [pc, #24]	; (8001270 <__NVIC_EnableIRQ+0x34>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff90 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff2d 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff42 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff35 	bl	800123c <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e169      	b.n	80016dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8158 	bne.w	80016d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a9a      	ldr	r2, [pc, #616]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d05e      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001430:	4a98      	ldr	r2, [pc, #608]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d875      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001436:	4a98      	ldr	r2, [pc, #608]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d058      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 800143c:	4a96      	ldr	r2, [pc, #600]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d86f      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001442:	4a96      	ldr	r2, [pc, #600]	; (800169c <HAL_GPIO_Init+0x2a8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d052      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001448:	4a94      	ldr	r2, [pc, #592]	; (800169c <HAL_GPIO_Init+0x2a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d869      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800144e:	4a94      	ldr	r2, [pc, #592]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04c      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001454:	4a92      	ldr	r2, [pc, #584]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d863      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800145a:	4a92      	ldr	r2, [pc, #584]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d046      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001460:	4a90      	ldr	r2, [pc, #576]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d85d      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001466:	2b12      	cmp	r3, #18
 8001468:	d82a      	bhi.n	80014c0 <HAL_GPIO_Init+0xcc>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d859      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <HAL_GPIO_Init+0x80>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014db 	.word	0x080014db
 8001480:	0800151d 	.word	0x0800151d
 8001484:	08001523 	.word	0x08001523
 8001488:	08001523 	.word	0x08001523
 800148c:	08001523 	.word	0x08001523
 8001490:	08001523 	.word	0x08001523
 8001494:	08001523 	.word	0x08001523
 8001498:	08001523 	.word	0x08001523
 800149c:	08001523 	.word	0x08001523
 80014a0:	08001523 	.word	0x08001523
 80014a4:	08001523 	.word	0x08001523
 80014a8:	08001523 	.word	0x08001523
 80014ac:	08001523 	.word	0x08001523
 80014b0:	08001523 	.word	0x08001523
 80014b4:	08001523 	.word	0x08001523
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	4a79      	ldr	r2, [pc, #484]	; (80016a8 <HAL_GPIO_Init+0x2b4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e029      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e024      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01f      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e01a      	b.n	8001524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e013      	b.n	8001524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break;
 800150e:	e009      	b.n	8001524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break;
 800151a:	e003      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x130>
          break;
 8001522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d801      	bhi.n	800152e <HAL_GPIO_Init+0x13a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_Init+0x13e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d802      	bhi.n	8001540 <HAL_GPIO_Init+0x14c>
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x152>
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	3b08      	subs	r3, #8
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	210f      	movs	r1, #15
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80b1 	beq.w	80016d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001574:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2bc>)
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_GPIO_Init+0x2c0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3f      	ldr	r2, [pc, #252]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <HAL_GPIO_Init+0x2c8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <HAL_GPIO_Init+0x2cc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1e0>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015e0:	2300      	movs	r3, #0
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f2:	492f      	ldr	r1, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x2bc>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	492c      	ldr	r1, [pc, #176]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4928      	ldr	r1, [pc, #160]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	4922      	ldr	r1, [pc, #136]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	491e      	ldr	r1, [pc, #120]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4918      	ldr	r1, [pc, #96]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4914      	ldr	r1, [pc, #80]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d021      	beq.n	80016c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e021      	b.n	80016d6 <HAL_GPIO_Init+0x2e2>
 8001692:	bf00      	nop
 8001694:	10320000 	.word	0x10320000
 8001698:	10310000 	.word	0x10310000
 800169c:	10220000 	.word	0x10220000
 80016a0:	10210000 	.word	0x10210000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	10110000 	.word	0x10110000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4909      	ldr	r1, [pc, #36]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f ae8e 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	372c      	adds	r7, #44	; 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e001      	b.n	800171e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	807b      	strh	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800173a:	787b      	ldrb	r3, [r7, #1]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001740:	887a      	ldrh	r2, [r7, #2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001746:	e003      	b.n	8001750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	041a      	lsls	r2, r3, #16
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	611a      	str	r2, [r3, #16]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	041a      	lsls	r2, r3, #16
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43d9      	mvns	r1, r3
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	400b      	ands	r3, r1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e272      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8087 	beq.w	80018ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ac:	4b92      	ldr	r3, [pc, #584]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b8:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d112      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
 80017c4:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x12c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d168      	bne.n	80018b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e24c      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x76>
 80017f4:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a7f      	ldr	r2, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e02e      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x98>
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7a      	ldr	r2, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a77      	ldr	r2, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xbc>
 800182e:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a71      	ldr	r2, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a67      	ldr	r2, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fcac 	bl	80011c4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fca8 	bl	80011c4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e200      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xe4>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fc98 	bl	80011c4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc94 	bl	80011c4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1ec      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x10c>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d063      	beq.n	800198e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c6:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
 80018de:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1c0      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4939      	ldr	r1, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fc4d 	bl	80011c4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fc49 	bl	80011c4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1a1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc2c 	bl	80011c4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff fc28 	bl	80011c4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e180      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03a      	beq.n	8001a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fc0c 	bl	80011c4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fc08 	bl	80011c4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e160      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 fa9c 	bl	8001f0c <RCC_Delay>
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fbf2 	bl	80011c4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e2:	e00f      	b.n	8001a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fbee 	bl	80011c4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d908      	bls.n	8001a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e146      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	42420000 	.word	0x42420000
 8001a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e9      	bne.n	80019e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a6 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fbaf 	bl	80011c4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fbab 	bl	80011c4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e103      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x312>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x334>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a66      	ldr	r2, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x356>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a60      	ldr	r2, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fb5f 	bl	80011c4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fb5b 	bl	80011c4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0b1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x37e>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fb49 	bl	80011c4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fb45 	bl	80011c4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e09b      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8087 	beq.w	8001c82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d061      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d146      	bne.n	8001c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb19 	bl	80011c4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff fb15 	bl	80011c4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e06d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d108      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4921      	ldr	r1, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a19      	ldr	r1, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	430b      	orrs	r3, r1
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fae9 	bl	80011c4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fae5 	bl	80011c4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46a>
 8001c14:	e035      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fad2 	bl	80011c4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff face 	bl	80011c4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e026      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x498>
 8001c42:	e01e      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e019      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x500>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d0      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4965      	ldr	r1, [pc, #404]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	494d      	ldr	r1, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e07f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e073      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4936      	ldr	r1, [pc, #216]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff fa20 	bl	80011c4 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff fa1c 	bl	80011c4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e053      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d210      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4922      	ldr	r1, [pc, #136]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e032      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4916      	ldr	r1, [pc, #88]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f000 f821 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1cc>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f97e 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	080027b4 	.word	0x080027b4
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x30>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x36>
 8001e92:	e027      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e96:	613b      	str	r3, [r7, #16]
      break;
 8001e98:	e027      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0c5b      	lsrs	r3, r3, #17
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	fb03 f202 	mul.w	r2, r3, r2
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e004      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	693b      	ldr	r3, [r7, #16]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	080027c4 	.word	0x080027c4
 8001f04:	080027d4 	.word	0x080027d4
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <RCC_Delay+0x34>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <RCC_Delay+0x38>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0a5b      	lsrs	r3, r3, #9
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f28:	bf00      	nop
  }
  while (Delay --);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1e5a      	subs	r2, r3, #1
 8001f2e:	60fa      	str	r2, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f9      	bne.n	8001f28 <RCC_Delay+0x1c>
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	20000000 	.word	0x20000000
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e041      	b.n	8001fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff f84e 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f000 fa74 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d001      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e03a      	b.n	8002076 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_TIM_Base_Start_IT+0x98>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x58>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d009      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x58>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_TIM_Base_Start_IT+0x9c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_Base_Start_IT+0x58>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_TIM_Base_Start_IT+0xa0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d010      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	e007      	b.n	8002074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800

0800208c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0202 	mvn.w	r2, #2
 80020b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9b4 	bl	800243c <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f9a7 	bl	800242a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f9b6 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0204 	mvn.w	r2, #4
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f98a 	bl	800243c <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f97d 	bl	800242a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f98c 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0208 	mvn.w	r2, #8
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2204      	movs	r2, #4
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f960 	bl	800243c <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f953 	bl	800242a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f962 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b10      	cmp	r3, #16
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0210 	mvn.w	r2, #16
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2208      	movs	r2, #8
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f936 	bl	800243c <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f929 	bl	800242a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f938 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fe51 	bl	8000eb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa7b 	bl	8002732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8fc 	bl	8002460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0220 	mvn.w	r2, #32
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa46 	bl	8002720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0b4      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x186>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f0:	d03e      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0xd4>
 80022f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f6:	f200 8087 	bhi.w	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fe:	f000 8086 	beq.w	800240e <HAL_TIM_ConfigClockSource+0x172>
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d87f      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d01a      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0xa6>
 800230c:	2b70      	cmp	r3, #112	; 0x70
 800230e:	d87b      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002310:	2b60      	cmp	r3, #96	; 0x60
 8002312:	d050      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002314:	2b60      	cmp	r3, #96	; 0x60
 8002316:	d877      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002318:	2b50      	cmp	r3, #80	; 0x50
 800231a:	d03c      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0xfa>
 800231c:	2b50      	cmp	r3, #80	; 0x50
 800231e:	d873      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d058      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d86f      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002328:	2b30      	cmp	r3, #48	; 0x30
 800232a:	d064      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x15a>
 800232c:	2b30      	cmp	r3, #48	; 0x30
 800232e:	d86b      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b20      	cmp	r3, #32
 8002332:	d060      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002334:	2b20      	cmp	r3, #32
 8002336:	d867      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05c      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x15a>
 800233c:	2b10      	cmp	r3, #16
 800233e:	d05a      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002340:	e062      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002352:	f000 f968 	bl	8002626 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	609a      	str	r2, [r3, #8]
      break;
 800236e:	e04f      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002380:	f000 f951 	bl	8002626 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002392:	609a      	str	r2, [r3, #8]
      break;
 8002394:	e03c      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f8c8 	bl	8002538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2150      	movs	r1, #80	; 0x50
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f91f 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023b4:	e02c      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c2:	461a      	mov	r2, r3
 80023c4:	f000 f8e6 	bl	8002594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2160      	movs	r1, #96	; 0x60
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f90f 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023d4:	e01c      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	461a      	mov	r2, r3
 80023e4:	f000 f8a8 	bl	8002538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8ff 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023f4:	e00c      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f000 f8f6 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 8002406:	e003      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e000      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800240e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <TIM_Base_SetConfig+0xb8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00b      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d007      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a26      	ldr	r2, [pc, #152]	; (8002530 <TIM_Base_SetConfig+0xbc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0x30>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <TIM_Base_SetConfig+0xc0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d108      	bne.n	80024b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <TIM_Base_SetConfig+0xb8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00b      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d007      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <TIM_Base_SetConfig+0xbc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0x62>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <TIM_Base_SetConfig+0xc0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d108      	bne.n	80024e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <TIM_Base_SetConfig+0xb8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f023 0201 	bic.w	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f023 030a 	bic.w	r3, r3, #10
 8002574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f023 0210 	bic.w	r2, r3, #16
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	f043 0307 	orr.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002640:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	021a      	lsls	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	431a      	orrs	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4313      	orrs	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e046      	b.n	800270a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d009      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <memset>:
 8002744:	4603      	mov	r3, r0
 8002746:	4402      	add	r2, r0
 8002748:	4293      	cmp	r3, r2
 800274a:	d100      	bne.n	800274e <memset+0xa>
 800274c:	4770      	bx	lr
 800274e:	f803 1b01 	strb.w	r1, [r3], #1
 8002752:	e7f9      	b.n	8002748 <memset+0x4>

08002754 <__libc_init_array>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	2600      	movs	r6, #0
 8002758:	4d0c      	ldr	r5, [pc, #48]	; (800278c <__libc_init_array+0x38>)
 800275a:	4c0d      	ldr	r4, [pc, #52]	; (8002790 <__libc_init_array+0x3c>)
 800275c:	1b64      	subs	r4, r4, r5
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	42a6      	cmp	r6, r4
 8002762:	d109      	bne.n	8002778 <__libc_init_array+0x24>
 8002764:	f000 f81a 	bl	800279c <_init>
 8002768:	2600      	movs	r6, #0
 800276a:	4d0a      	ldr	r5, [pc, #40]	; (8002794 <__libc_init_array+0x40>)
 800276c:	4c0a      	ldr	r4, [pc, #40]	; (8002798 <__libc_init_array+0x44>)
 800276e:	1b64      	subs	r4, r4, r5
 8002770:	10a4      	asrs	r4, r4, #2
 8002772:	42a6      	cmp	r6, r4
 8002774:	d105      	bne.n	8002782 <__libc_init_array+0x2e>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	f855 3b04 	ldr.w	r3, [r5], #4
 800277c:	4798      	blx	r3
 800277e:	3601      	adds	r6, #1
 8002780:	e7ee      	b.n	8002760 <__libc_init_array+0xc>
 8002782:	f855 3b04 	ldr.w	r3, [r5], #4
 8002786:	4798      	blx	r3
 8002788:	3601      	adds	r6, #1
 800278a:	e7f2      	b.n	8002772 <__libc_init_array+0x1e>
 800278c:	080027d8 	.word	0x080027d8
 8002790:	080027d8 	.word	0x080027d8
 8002794:	080027d8 	.word	0x080027d8
 8002798:	080027dc 	.word	0x080027dc

0800279c <_init>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr

080027a8 <_fini>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr
