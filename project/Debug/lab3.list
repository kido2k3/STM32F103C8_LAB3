
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003258  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000030  080033c0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080033c0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b9f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2b  00000000  00000000  00028c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e7  00000000  00000000  0002b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ef1  00000000  00000000  0002ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb43  00000000  00000000  00042990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084718  00000000  00000000  0004e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a60  00000000  00000000  000d2bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800334c 	.word	0x0800334c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800334c 	.word	0x0800334c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <button_init>:

	GPIO_TypeDef *port;
	uint16_t pin;
} button[NUMBER_OF_BUTTON];

void button_init(void) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e04f      	b.n	80009d4 <button_init+0xac>
		button[i].reg[0] = button[i].reg[1] = button[i].reg[2] = RELEASE;
 8000934:	4935      	ldr	r1, [pc, #212]	; (8000a0c <button_init+0xe4>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3302      	adds	r3, #2
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	4930      	ldr	r1, [pc, #192]	; (8000a0c <button_init+0xe4>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	3302      	adds	r3, #2
 8000958:	7818      	ldrb	r0, [r3, #0]
 800095a:	492c      	ldr	r1, [pc, #176]	; (8000a0c <button_init+0xe4>)
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	3301      	adds	r3, #1
 800096a:	4602      	mov	r2, r0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	4927      	ldr	r1, [pc, #156]	; (8000a0c <button_init+0xe4>)
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	3301      	adds	r3, #1
 800097e:	7818      	ldrb	r0, [r3, #0]
 8000980:	4922      	ldr	r1, [pc, #136]	; (8000a0c <button_init+0xe4>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	4602      	mov	r2, r0
 8000990:	701a      	strb	r2, [r3, #0]
		button[i].is_long_pressed = 0;
 8000992:	491e      	ldr	r1, [pc, #120]	; (8000a0c <button_init+0xe4>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3304      	adds	r3, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		button[i].is_pressed = 0;
 80009a6:	4919      	ldr	r1, [pc, #100]	; (8000a0c <button_init+0xe4>)
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	3303      	adds	r3, #3
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		button[i].timer = LONG_PRESSED_TIME;
 80009ba:	4914      	ldr	r1, [pc, #80]	; (8000a0c <button_init+0xe4>)
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3308      	adds	r3, #8
 80009ca:	2296      	movs	r2, #150	; 0x96
 80009cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTON; i++) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3301      	adds	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	ddac      	ble.n	8000934 <button_init+0xc>
	}
	// port and pin were matched by hand
	button[0].port = BUTTON1_PORT;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <button_init+0xe4>)
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <button_init+0xe8>)
 80009de:	60da      	str	r2, [r3, #12]
	button[0].pin = BUTTON1;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <button_init+0xe4>)
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	821a      	strh	r2, [r3, #16]
	button[1].port = BUTTON2_PORT;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <button_init+0xe4>)
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <button_init+0xe8>)
 80009ea:	621a      	str	r2, [r3, #32]
	button[1].pin = BUTTON2;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <button_init+0xe4>)
 80009ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f2:	849a      	strh	r2, [r3, #36]	; 0x24
	button[2].port = BUTTON3_PORT;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <button_init+0xe4>)
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <button_init+0xe8>)
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
	button[2].pin = BUTTON3;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <button_init+0xe4>)
 80009fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a00:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	2000004c 	.word	0x2000004c
 8000a10:	40010800 	.word	0x40010800

08000a14 <button_read>:
void button_read(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	e0d5      	b.n	8000bcc <button_read+0x1b8>
		button[i].reg[0] = button[i].reg[1];
 8000a20:	496f      	ldr	r1, [pc, #444]	; (8000be0 <button_read+0x1cc>)
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3301      	adds	r3, #1
 8000a30:	7818      	ldrb	r0, [r3, #0]
 8000a32:	496b      	ldr	r1, [pc, #428]	; (8000be0 <button_read+0x1cc>)
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	440b      	add	r3, r1
 8000a40:	4602      	mov	r2, r0
 8000a42:	701a      	strb	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 8000a44:	4966      	ldr	r1, [pc, #408]	; (8000be0 <button_read+0x1cc>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	440b      	add	r3, r1
 8000a52:	3302      	adds	r3, #2
 8000a54:	7818      	ldrb	r0, [r3, #0]
 8000a56:	4962      	ldr	r1, [pc, #392]	; (8000be0 <button_read+0x1cc>)
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	3301      	adds	r3, #1
 8000a66:	4602      	mov	r2, r0
 8000a68:	701a      	strb	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(button[i].port, button[i].pin);
 8000a6a:	495d      	ldr	r1, [pc, #372]	; (8000be0 <button_read+0x1cc>)
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	330c      	adds	r3, #12
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4958      	ldr	r1, [pc, #352]	; (8000be0 <button_read+0x1cc>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	440b      	add	r3, r1
 8000a8a:	3310      	adds	r3, #16
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f001 fc24 	bl	80022dc <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4618      	mov	r0, r3
 8000a98:	4951      	ldr	r1, [pc, #324]	; (8000be0 <button_read+0x1cc>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	701a      	strb	r2, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000aac:	494c      	ldr	r1, [pc, #304]	; (8000be0 <button_read+0x1cc>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	7819      	ldrb	r1, [r3, #0]
 8000abc:	4848      	ldr	r0, [pc, #288]	; (8000be0 <button_read+0x1cc>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	3301      	adds	r3, #1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d179      	bne.n	8000bc6 <button_read+0x1b2>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000ad2:	4943      	ldr	r1, [pc, #268]	; (8000be0 <button_read+0x1cc>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	483e      	ldr	r0, [pc, #248]	; (8000be0 <button_read+0x1cc>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4403      	add	r3, r0
 8000af2:	3302      	adds	r3, #2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d165      	bne.n	8000bc6 <button_read+0x1b2>
			if (button[i].reg[2] == PRESSED) {
 8000afa:	4939      	ldr	r1, [pc, #228]	; (8000be0 <button_read+0x1cc>)
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	3302      	adds	r3, #2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d133      	bne.n	8000b78 <button_read+0x164>
				button[i].is_pressed = 1;
 8000b10:	4933      	ldr	r1, [pc, #204]	; (8000be0 <button_read+0x1cc>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3303      	adds	r3, #3
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
				if (button[i].timer > 0) {
 8000b24:	492e      	ldr	r1, [pc, #184]	; (8000be0 <button_read+0x1cc>)
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3308      	adds	r3, #8
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d013      	beq.n	8000b62 <button_read+0x14e>
					button[i].timer--;
 8000b3a:	4929      	ldr	r1, [pc, #164]	; (8000be0 <button_read+0x1cc>)
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	3308      	adds	r3, #8
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1e59      	subs	r1, r3, #1
 8000b4e:	4824      	ldr	r0, [pc, #144]	; (8000be0 <button_read+0x1cc>)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4613      	mov	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4403      	add	r3, r0
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	6019      	str	r1, [r3, #0]
 8000b60:	e031      	b.n	8000bc6 <button_read+0x1b2>
				} else {
					button[i].is_long_pressed = 1;
 8000b62:	491f      	ldr	r1, [pc, #124]	; (8000be0 <button_read+0x1cc>)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3304      	adds	r3, #4
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e026      	b.n	8000bc6 <button_read+0x1b2>
				}
			} else {
				button[i].is_long_pressed = button[i].is_pressed = 0;
 8000b78:	4919      	ldr	r1, [pc, #100]	; (8000be0 <button_read+0x1cc>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	3303      	adds	r3, #3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	4914      	ldr	r1, [pc, #80]	; (8000be0 <button_read+0x1cc>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	7818      	ldrb	r0, [r3, #0]
 8000b9e:	4910      	ldr	r1, [pc, #64]	; (8000be0 <button_read+0x1cc>)
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	3304      	adds	r3, #4
 8000bae:	4602      	mov	r2, r0
 8000bb0:	701a      	strb	r2, [r3, #0]
				button[i].timer = LONG_PRESSED_TIME;
 8000bb2:	490b      	ldr	r1, [pc, #44]	; (8000be0 <button_read+0x1cc>)
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	2296      	movs	r2, #150	; 0x96
 8000bc4:	601a      	str	r2, [r3, #0]
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	f67f af26 	bls.w	8000a20 <button_read+0xc>
			}
		}
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000004c 	.word	0x2000004c

08000be4 <is_button_pressed>:

bool is_button_pressed(unsigned i) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d901      	bls.n	8000bf6 <is_button_pressed+0x12>
		return ERROR;
 8000bf2:	23ff      	movs	r3, #255	; 0xff
 8000bf4:	e008      	b.n	8000c08 <is_button_pressed+0x24>
	return button[i].is_pressed;
 8000bf6:	4907      	ldr	r1, [pc, #28]	; (8000c14 <is_button_pressed+0x30>)
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	3303      	adds	r3, #3
 8000c06:	781b      	ldrb	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000004c 	.word	0x2000004c

08000c18 <is_button_long_pressed>:

bool is_button_long_pressed(unsigned i) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if (i >= NUMBER_OF_BUTTON)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d901      	bls.n	8000c2a <is_button_long_pressed+0x12>
		return ERROR;
 8000c26:	23ff      	movs	r3, #255	; 0xff
 8000c28:	e008      	b.n	8000c3c <is_button_long_pressed+0x24>
	return button[i].is_long_pressed;
 8000c2a:	4907      	ldr	r1, [pc, #28]	; (8000c48 <is_button_long_pressed+0x30>)
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	3304      	adds	r3, #4
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000004c 	.word	0x2000004c

08000c4c <traffic_light_fsm>:

bool button0_fsm(void);
bool button1_fsm(void);
bool button2_fsm(void);

void traffic_light_fsm(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	update_led_buf(traffic_light_timer1, traffic_light_timer2);
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a45      	ldr	r2, [pc, #276]	; (8000d6c <traffic_light_fsm+0x120>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fc12 	bl	8001484 <update_led_buf>
	switch (tl_st) {
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <traffic_light_fsm+0x124>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d873      	bhi.n	8000d50 <traffic_light_fsm+0x104>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <traffic_light_fsm+0x24>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000cb1 	.word	0x08000cb1
 8000c78:	08000ce9 	.word	0x08000ce9
 8000c7c:	08000d19 	.word	0x08000d19
	case RED_GREEN:
		control_traffic_light(0, 1, 0, 0);
 8000c80:	2300      	movs	r3, #0
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 fb5a 	bl	8001340 <control_traffic_light>
		control_traffic_light(1, 0, 0, 1);
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 fb54 	bl	8001340 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 8000c98:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <traffic_light_fsm+0x120>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d159      	bne.n	8000d54 <traffic_light_fsm+0x108>
			traffic_light_timer2 = yellow_time;
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <traffic_light_fsm+0x128>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <traffic_light_fsm+0x120>)
 8000ca6:	6013      	str	r3, [r2, #0]
			tl_st = RED_YELLOW;
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <traffic_light_fsm+0x124>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cae:	e051      	b.n	8000d54 <traffic_light_fsm+0x108>
	case RED_YELLOW:
		control_traffic_light(0, 1, 0, 0);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 fb42 	bl	8001340 <control_traffic_light>
		control_traffic_light(1, 0, 1, 0);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fb3c 	bl	8001340 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <traffic_light_fsm+0x120>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d143      	bne.n	8000d58 <traffic_light_fsm+0x10c>
			traffic_light_timer1 = green_time;
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <traffic_light_fsm+0x12c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000cd6:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = red_time;
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <traffic_light_fsm+0x130>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <traffic_light_fsm+0x120>)
 8000cde:	6013      	str	r3, [r2, #0]
			tl_st = GREEN_RED;
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <traffic_light_fsm+0x124>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ce6:	e037      	b.n	8000d58 <traffic_light_fsm+0x10c>
	case GREEN_RED:
		control_traffic_light(0, 0, 0, 1);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fb26 	bl	8001340 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 fb20 	bl	8001340 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d129      	bne.n	8000d5c <traffic_light_fsm+0x110>
			traffic_light_timer1 = yellow_time;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <traffic_light_fsm+0x128>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000d0e:	6013      	str	r3, [r2, #0]
			tl_st = YELLOW_RED;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <traffic_light_fsm+0x124>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d16:	e021      	b.n	8000d5c <traffic_light_fsm+0x110>
	case YELLOW_RED:
		control_traffic_light(0, 0, 1, 0);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fb0e 	bl	8001340 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8000d24:	2300      	movs	r3, #0
 8000d26:	2200      	movs	r2, #0
 8000d28:	2101      	movs	r1, #1
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fb08 	bl	8001340 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d113      	bne.n	8000d60 <traffic_light_fsm+0x114>
			traffic_light_timer1 = red_time;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <traffic_light_fsm+0x130>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <traffic_light_fsm+0x11c>)
 8000d3e:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = green_time;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <traffic_light_fsm+0x12c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <traffic_light_fsm+0x120>)
 8000d46:	6013      	str	r3, [r2, #0]
			tl_st = RED_GREEN;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <traffic_light_fsm+0x124>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d4e:	e007      	b.n	8000d60 <traffic_light_fsm+0x114>

	default:
		break;
 8000d50:	bf00      	nop
 8000d52:	e006      	b.n	8000d62 <traffic_light_fsm+0x116>
		break;
 8000d54:	bf00      	nop
 8000d56:	e004      	b.n	8000d62 <traffic_light_fsm+0x116>
		break;
 8000d58:	bf00      	nop
 8000d5a:	e002      	b.n	8000d62 <traffic_light_fsm+0x116>
		break;
 8000d5c:	bf00      	nop
 8000d5e:	e000      	b.n	8000d62 <traffic_light_fsm+0x116>
		break;
 8000d60:	bf00      	nop
	}
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000018 	.word	0x20000018
 8000d6c:	2000001c 	.word	0x2000001c
 8000d70:	2000008d 	.word	0x2000008d
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000000 	.word	0x20000000

08000d80 <fsm_led>:

void fsm_led(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	switch (led_st) {
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <fsm_led+0xd0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <fsm_led+0x12>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d041      	beq.n	8000e14 <fsm_led+0x94>
		if (!is_timer_on(3)) {
			led_st = ON;
			set_timer(3, TOGGLE_TIME);
		}
	}
}
 8000d90:	e05b      	b.n	8000e4a <fsm_led+0xca>
		switch (light_st) {
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <fsm_led+0xd4>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d020      	beq.n	8000ddc <fsm_led+0x5c>
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	dc2b      	bgt.n	8000df6 <fsm_led+0x76>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d002      	beq.n	8000da8 <fsm_led+0x28>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d00d      	beq.n	8000dc2 <fsm_led+0x42>
			break;
 8000da6:	e026      	b.n	8000df6 <fsm_led+0x76>
			control_traffic_light(0, 1, 0, 0);
 8000da8:	2300      	movs	r3, #0
 8000daa:	2200      	movs	r2, #0
 8000dac:	2101      	movs	r1, #1
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 fac6 	bl	8001340 <control_traffic_light>
			control_traffic_light(1, 1, 0, 0);
 8000db4:	2300      	movs	r3, #0
 8000db6:	2200      	movs	r2, #0
 8000db8:	2101      	movs	r1, #1
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fac0 	bl	8001340 <control_traffic_light>
			break;
 8000dc0:	e01a      	b.n	8000df8 <fsm_led+0x78>
			control_traffic_light(0, 0, 1, 0);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fab9 	bl	8001340 <control_traffic_light>
			control_traffic_light(1, 0, 1, 0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fab3 	bl	8001340 <control_traffic_light>
			break;
 8000dda:	e00d      	b.n	8000df8 <fsm_led+0x78>
			control_traffic_light(0, 0, 0, 1);
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 faac 	bl	8001340 <control_traffic_light>
			control_traffic_light(1, 0, 0, 1);
 8000de8:	2301      	movs	r3, #1
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 faa6 	bl	8001340 <control_traffic_light>
			break;
 8000df4:	e000      	b.n	8000df8 <fsm_led+0x78>
			break;
 8000df6:	bf00      	nop
		if (!is_timer_on(3)) {
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 feb3 	bl	8001b64 <is_timer_on>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d121      	bne.n	8000e48 <fsm_led+0xc8>
			led_st = OFF;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <fsm_led+0xd0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000e0a:	21fa      	movs	r1, #250	; 0xfa
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 fe4b 	bl	8001aa8 <set_timer>
		break;
 8000e12:	e019      	b.n	8000e48 <fsm_led+0xc8>
		control_traffic_light(0, 0, 0, 0);
 8000e14:	2300      	movs	r3, #0
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fa90 	bl	8001340 <control_traffic_light>
		control_traffic_light(1, 0, 0, 0);
 8000e20:	2300      	movs	r3, #0
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fa8a 	bl	8001340 <control_traffic_light>
		if (!is_timer_on(3)) {
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fe99 	bl	8001b64 <is_timer_on>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <fsm_led+0xca>
			led_st = ON;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <fsm_led+0xd0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000e3e:	21fa      	movs	r1, #250	; 0xfa
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fe31 	bl	8001aa8 <set_timer>
}
 8000e46:	e000      	b.n	8000e4a <fsm_led+0xca>
		break;
 8000e48:	bf00      	nop
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000008e 	.word	0x2000008e
 8000e54:	2000008b 	.word	0x2000008b

08000e58 <increase_value>:
void increase_value(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	if (light_pre_st == RED_ADJUSTMENT) {
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <increase_value+0x70>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10c      	bne.n	8000e7e <increase_value+0x26>
		red_time_buffer++;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <increase_value+0x74>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <increase_value+0x74>)
 8000e6c:	6013      	str	r3, [r2, #0]
		if (red_time_buffer >= 100) {
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <increase_value+0x74>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b63      	cmp	r3, #99	; 0x63
 8000e74:	d924      	bls.n	8000ec0 <increase_value+0x68>
			red_time_buffer = 0;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <increase_value+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
		green_time_buffer++;
		if (green_time_buffer >= 100) {
			green_time_buffer = 0;
		}
	}
}
 8000e7c:	e020      	b.n	8000ec0 <increase_value+0x68>
	} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <increase_value+0x70>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d10c      	bne.n	8000ea0 <increase_value+0x48>
		yellow_time_buffer++;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <increase_value+0x78>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <increase_value+0x78>)
 8000e8e:	6013      	str	r3, [r2, #0]
		if (yellow_time_buffer >= 100) {
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <increase_value+0x78>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b63      	cmp	r3, #99	; 0x63
 8000e96:	d913      	bls.n	8000ec0 <increase_value+0x68>
			yellow_time_buffer = 0;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <increase_value+0x78>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	e00f      	b.n	8000ec0 <increase_value+0x68>
	} else if (light_pre_st == GREEN_ADJUSTMENT) {
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <increase_value+0x70>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d10b      	bne.n	8000ec0 <increase_value+0x68>
		green_time_buffer++;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <increase_value+0x7c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <increase_value+0x7c>)
 8000eb0:	6013      	str	r3, [r2, #0]
		if (green_time_buffer >= 100) {
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <increase_value+0x7c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b63      	cmp	r3, #99	; 0x63
 8000eb8:	d902      	bls.n	8000ec0 <increase_value+0x68>
			green_time_buffer = 0;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <increase_value+0x7c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	2000008c 	.word	0x2000008c
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000014 	.word	0x20000014
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <fsm>:
void fsm(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

	if (!is_timer_on(0)) {
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 fe41 	bl	8001b64 <is_timer_on>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d115      	bne.n	8000f14 <fsm+0x3c>
		if (light_st != TRAFFIC_LIGHT || red_time == green_time + yellow_time) {
 8000ee8:	4b8f      	ldr	r3, [pc, #572]	; (8001128 <fsm+0x250>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d108      	bne.n	8000f02 <fsm+0x2a>
 8000ef0:	4b8e      	ldr	r3, [pc, #568]	; (800112c <fsm+0x254>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <fsm+0x258>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	441a      	add	r2, r3
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <fsm+0x25c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d102      	bne.n	8000f08 <fsm+0x30>
			scan7SEG();
 8000f02:	f000 faa9 	bl	8001458 <scan7SEG>
 8000f06:	e001      	b.n	8000f0c <fsm+0x34>
		} else {
			off_all7led();
 8000f08:	f000 fb00 	bl	800150c <off_all7led>
		}
		set_timer(0, SCAN_7SEGLED_TIME);
 8000f0c:	2132      	movs	r1, #50	; 0x32
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 fdca 	bl	8001aa8 <set_timer>
	}
	switch (light_st) {
 8000f14:	4b84      	ldr	r3, [pc, #528]	; (8001128 <fsm+0x250>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	f200 8101 	bhi.w	8001120 <fsm+0x248>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <fsm+0x4c>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f41 	.word	0x08000f41
 8000f28:	08000fb1 	.word	0x08000fb1
 8000f2c:	08000fef 	.word	0x08000fef
 8000f30:	0800102d 	.word	0x0800102d
 8000f34:	0800106b 	.word	0x0800106b
 8000f38:	080010af 	.word	0x080010af
 8000f3c:	080010c3 	.word	0x080010c3
	case TRAFFIC_LIGHT:
		if (red_time != green_time + yellow_time) { //off all leds
 8000f40:	4b7a      	ldr	r3, [pc, #488]	; (800112c <fsm+0x254>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <fsm+0x258>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	441a      	add	r2, r3
 8000f4a:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <fsm+0x25c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00c      	beq.n	8000f6c <fsm+0x94>
			control_traffic_light(0, 0, 0, 0);
 8000f52:	2300      	movs	r3, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f9f1 	bl	8001340 <control_traffic_light>
			control_traffic_light(1, 0, 0, 0);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 f9eb 	bl	8001340 <control_traffic_light>
 8000f6a:	e01e      	b.n	8000faa <fsm+0xd2>
		} else {
			if (!is_timer_on(1)) {
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fdf9 	bl	8001b64 <is_timer_on>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d116      	bne.n	8000fa6 <fsm+0xce>
				if (traffic_light_timer1 > 0)
 8000f78:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <fsm+0x260>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <fsm+0xb2>
					traffic_light_timer1--;
 8000f80:	4b6d      	ldr	r3, [pc, #436]	; (8001138 <fsm+0x260>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a6c      	ldr	r2, [pc, #432]	; (8001138 <fsm+0x260>)
 8000f88:	6013      	str	r3, [r2, #0]
				if (traffic_light_timer2 > 0)
 8000f8a:	4b6c      	ldr	r3, [pc, #432]	; (800113c <fsm+0x264>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <fsm+0xc4>
					traffic_light_timer2--;
 8000f92:	4b6a      	ldr	r3, [pc, #424]	; (800113c <fsm+0x264>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	4a68      	ldr	r2, [pc, #416]	; (800113c <fsm+0x264>)
 8000f9a:	6013      	str	r3, [r2, #0]
				set_timer(1, ONE_SECOND);
 8000f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 fd81 	bl	8001aa8 <set_timer>
			}
			traffic_light_fsm();
 8000fa6:	f7ff fe51 	bl	8000c4c <traffic_light_fsm>
		}
		button0_fsm();
 8000faa:	f000 f8d1 	bl	8001150 <button0_fsm>

		break;
 8000fae:	e0b8      	b.n	8001122 <fsm+0x24a>
	case RED_ADJUSTMENT:
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 8000fb0:	4b63      	ldr	r3, [pc, #396]	; (8001140 <fsm+0x268>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d00b      	beq.n	8000fd0 <fsm+0xf8>
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <fsm+0x268>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d007      	beq.n	8000fd0 <fsm+0xf8>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME) {
 8000fc0:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <fsm+0x268>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b06      	cmp	r3, #6
 8000fc6:	d003      	beq.n	8000fd0 <fsm+0xf8>
			red_time_buffer = red_time;
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <fsm+0x25c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5d      	ldr	r2, [pc, #372]	; (8001144 <fsm+0x26c>)
 8000fce:	6013      	str	r3, [r2, #0]
		}
		update_led_buf(red_time_buffer, 2);
 8000fd0:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <fsm+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fa54 	bl	8001484 <update_led_buf>
		fsm_led();
 8000fdc:	f7ff fed0 	bl	8000d80 <fsm_led>
		button0_fsm();
 8000fe0:	f000 f8b6 	bl	8001150 <button0_fsm>
		button1_fsm();
 8000fe4:	f000 f946 	bl	8001274 <button1_fsm>
		button2_fsm();
 8000fe8:	f000 f90a 	bl	8001200 <button2_fsm>

		break;
 8000fec:	e099      	b.n	8001122 <fsm+0x24a>
	case YELLOW_ADJUSTMENT:
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <fsm+0x268>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d00b      	beq.n	800100e <fsm+0x136>
 8000ff6:	4b52      	ldr	r3, [pc, #328]	; (8001140 <fsm+0x268>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d007      	beq.n	800100e <fsm+0x136>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 8000ffe:	4b50      	ldr	r3, [pc, #320]	; (8001140 <fsm+0x268>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b06      	cmp	r3, #6
 8001004:	d003      	beq.n	800100e <fsm+0x136>
			yellow_time_buffer = yellow_time;
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <fsm+0x258>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <fsm+0x270>)
 800100c:	6013      	str	r3, [r2, #0]
		update_led_buf(yellow_time_buffer, 3);
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <fsm+0x270>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2103      	movs	r1, #3
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fa35 	bl	8001484 <update_led_buf>
		fsm_led();
 800101a:	f7ff feb1 	bl	8000d80 <fsm_led>
		button0_fsm();
 800101e:	f000 f897 	bl	8001150 <button0_fsm>
		button1_fsm();
 8001022:	f000 f927 	bl	8001274 <button1_fsm>
		button2_fsm();
 8001026:	f000 f8eb 	bl	8001200 <button2_fsm>

		break;
 800102a:	e07a      	b.n	8001122 <fsm+0x24a>
	case GREEN_ADJUSTMENT:
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <fsm+0x268>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d00b      	beq.n	800104c <fsm+0x174>
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <fsm+0x268>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d007      	beq.n	800104c <fsm+0x174>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <fsm+0x268>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b06      	cmp	r3, #6
 8001042:	d003      	beq.n	800104c <fsm+0x174>
			green_time_buffer = green_time;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <fsm+0x254>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a40      	ldr	r2, [pc, #256]	; (800114c <fsm+0x274>)
 800104a:	6013      	str	r3, [r2, #0]
		update_led_buf(green_time_buffer, 4);
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <fsm+0x274>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa16 	bl	8001484 <update_led_buf>
		fsm_led();
 8001058:	f7ff fe92 	bl	8000d80 <fsm_led>
		button0_fsm();
 800105c:	f000 f878 	bl	8001150 <button0_fsm>
		button1_fsm();
 8001060:	f000 f908 	bl	8001274 <button1_fsm>
		button2_fsm();
 8001064:	f000 f8cc 	bl	8001200 <button2_fsm>

		break;
 8001068:	e05b      	b.n	8001122 <fsm+0x24a>
	case SET_VALUE:
		if (light_pre_st == RED_ADJUSTMENT) {
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <fsm+0x268>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <fsm+0x1a4>
			red_time = red_time_buffer;
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <fsm+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <fsm+0x25c>)
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e010      	b.n	800109e <fsm+0x1c6>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <fsm+0x268>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d104      	bne.n	800108e <fsm+0x1b6>
			yellow_time = yellow_time_buffer;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <fsm+0x270>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <fsm+0x258>)
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e007      	b.n	800109e <fsm+0x1c6>
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <fsm+0x268>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d103      	bne.n	800109e <fsm+0x1c6>
			green_time = green_time_buffer;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <fsm+0x274>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a24      	ldr	r2, [pc, #144]	; (800112c <fsm+0x254>)
 800109c:	6013      	str	r3, [r2, #0]
		}
		light_st = light_pre_st;
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <fsm+0x268>)
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <fsm+0x250>)
 80010a4:	701a      	strb	r2, [r3, #0]
		light_pre_st = SET_VALUE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <fsm+0x268>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	701a      	strb	r2, [r3, #0]
		break;
 80010ac:	e039      	b.n	8001122 <fsm+0x24a>
	case INCREASE_BY_1:
		increase_value();
 80010ae:	f7ff fed3 	bl	8000e58 <increase_value>
		light_st = light_pre_st;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <fsm+0x268>)
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <fsm+0x250>)
 80010b8:	701a      	strb	r2, [r3, #0]
		light_pre_st = INCREASE_BY_1;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <fsm+0x268>)
 80010bc:	2205      	movs	r2, #5
 80010be:	701a      	strb	r2, [r3, #0]
		break;
 80010c0:	e02f      	b.n	8001122 <fsm+0x24a>
	case INCREASE_BY_1_OVER_TIME:
		if (light_pre_st == RED_ADJUSTMENT) {
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <fsm+0x268>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d106      	bne.n	80010d8 <fsm+0x200>
			update_led_buf(red_time_buffer, 2);
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <fsm+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2102      	movs	r1, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f9d7 	bl	8001484 <update_led_buf>
 80010d6:	e014      	b.n	8001102 <fsm+0x22a>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <fsm+0x268>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d106      	bne.n	80010ee <fsm+0x216>
			update_led_buf(yellow_time_buffer, 3);
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <fsm+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f9cc 	bl	8001484 <update_led_buf>
 80010ec:	e009      	b.n	8001102 <fsm+0x22a>
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <fsm+0x268>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d105      	bne.n	8001102 <fsm+0x22a>
			update_led_buf(green_time_buffer, 4);
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <fsm+0x274>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2104      	movs	r1, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f9c1 	bl	8001484 <update_led_buf>
		}
		if (!is_timer_on(4)) {
 8001102:	2004      	movs	r0, #4
 8001104:	f000 fd2e 	bl	8001b64 <is_timer_on>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <fsm+0x242>
			increase_value();
 800110e:	f7ff fea3 	bl	8000e58 <increase_value>
			set_timer(4, INCREASE_TIME);
 8001112:	21fa      	movs	r1, #250	; 0xfa
 8001114:	2004      	movs	r0, #4
 8001116:	f000 fcc7 	bl	8001aa8 <set_timer>
		}
		button1_fsm();
 800111a:	f000 f8ab 	bl	8001274 <button1_fsm>
		break;
 800111e:	e000      	b.n	8001122 <fsm+0x24a>
	default:
		break;
 8001120:	bf00      	nop
	}
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000008b 	.word	0x2000008b
 800112c:	20000004 	.word	0x20000004
 8001130:	20000008 	.word	0x20000008
 8001134:	20000000 	.word	0x20000000
 8001138:	20000018 	.word	0x20000018
 800113c:	2000001c 	.word	0x2000001c
 8001140:	2000008c 	.word	0x2000008c
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000014 	.word	0x20000014
 800114c:	20000010 	.word	0x20000010

08001150 <button0_fsm>:
bool button0_fsm(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <button0_fsm+0xa4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <button0_fsm+0x12>
 800115c:	2b01      	cmp	r3, #1
 800115e:	d036      	beq.n	80011ce <button0_fsm+0x7e>
 8001160:	e041      	b.n	80011e6 <button0_fsm+0x96>
	case release:
		if (is_button_pressed(0) == 1) {
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fd3e 	bl	8000be4 <is_button_pressed>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d127      	bne.n	80011be <button0_fsm+0x6e>
			// to do
			light_pre_st = light_st;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <button0_fsm+0xa8>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <button0_fsm+0xac>)
 8001174:	701a      	strb	r2, [r3, #0]
			switch (light_st) {
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <button0_fsm+0xa8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d81a      	bhi.n	80011b4 <button0_fsm+0x64>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <button0_fsm+0x34>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119d 	.word	0x0800119d
 800118c:	080011a5 	.word	0x080011a5
 8001190:	080011ad 	.word	0x080011ad
			case TRAFFIC_LIGHT:
				light_st = RED_ADJUSTMENT;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <button0_fsm+0xa8>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
				break;
 800119a:	e00c      	b.n	80011b6 <button0_fsm+0x66>
			case RED_ADJUSTMENT:
				light_st = YELLOW_ADJUSTMENT;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <button0_fsm+0xa8>)
 800119e:	2202      	movs	r2, #2
 80011a0:	701a      	strb	r2, [r3, #0]
				break;
 80011a2:	e008      	b.n	80011b6 <button0_fsm+0x66>
			case YELLOW_ADJUSTMENT:
				light_st = GREEN_ADJUSTMENT;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <button0_fsm+0xa8>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	701a      	strb	r2, [r3, #0]
				break;
 80011aa:	e004      	b.n	80011b6 <button0_fsm+0x66>
			case GREEN_ADJUSTMENT:
				light_st = TRAFFIC_LIGHT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <button0_fsm+0xa8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
				break;
 80011b2:	e000      	b.n	80011b6 <button0_fsm+0x66>
			default:
				break;
 80011b4:	bf00      	nop
			}
			button_st[0] = pressed;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <button0_fsm+0xa4>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 80011bc:	e015      	b.n	80011ea <button0_fsm+0x9a>
		} else if (is_button_pressed(0) == ERROR)
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fd10 	bl	8000be4 <is_button_pressed>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d10f      	bne.n	80011ea <button0_fsm+0x9a>
			return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e00f      	b.n	80011ee <button0_fsm+0x9e>
	case pressed:
		if (!is_button_pressed(0)) {
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fd08 	bl	8000be4 <is_button_pressed>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <button0_fsm+0x92>
			button_st[0] = release;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <button0_fsm+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 80011e0:	e004      	b.n	80011ec <button0_fsm+0x9c>
			return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e003      	b.n	80011ee <button0_fsm+0x9e>
	default:
		return 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e001      	b.n	80011ee <button0_fsm+0x9e>
		break;
 80011ea:	bf00      	nop
		break;
	}
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000088 	.word	0x20000088
 80011f8:	2000008b 	.word	0x2000008b
 80011fc:	2000008c 	.word	0x2000008c

08001200 <button2_fsm>:
bool button2_fsm(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <button2_fsm+0x68>)
 8001206:	789b      	ldrb	r3, [r3, #2]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <button2_fsm+0x12>
 800120c:	2b01      	cmp	r3, #1
 800120e:	d019      	beq.n	8001244 <button2_fsm+0x44>
 8001210:	e024      	b.n	800125c <button2_fsm+0x5c>
	case release:
		if (is_button_pressed(2) == 1) {
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff fce6 	bl	8000be4 <is_button_pressed>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10a      	bne.n	8001234 <button2_fsm+0x34>
			// to do
			light_pre_st = light_st;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <button2_fsm+0x6c>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <button2_fsm+0x70>)
 8001224:	701a      	strb	r2, [r3, #0]
			light_st = SET_VALUE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <button2_fsm+0x6c>)
 8001228:	2204      	movs	r2, #4
 800122a:	701a      	strb	r2, [r3, #0]
			button_st[2] = pressed;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <button2_fsm+0x68>)
 800122e:	2201      	movs	r2, #1
 8001230:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(2) == ERROR)
			return 0;
		break;
 8001232:	e015      	b.n	8001260 <button2_fsm+0x60>
		} else if (is_button_pressed(2) == ERROR)
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff fcd5 	bl	8000be4 <is_button_pressed>
 800123a:	4603      	mov	r3, r0
 800123c:	2bff      	cmp	r3, #255	; 0xff
 800123e:	d10f      	bne.n	8001260 <button2_fsm+0x60>
			return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e00f      	b.n	8001264 <button2_fsm+0x64>
	case pressed:
		if (!is_button_pressed(2)) {
 8001244:	2002      	movs	r0, #2
 8001246:	f7ff fccd 	bl	8000be4 <is_button_pressed>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <button2_fsm+0x58>
			button_st[2] = release;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <button2_fsm+0x68>)
 8001252:	2200      	movs	r2, #0
 8001254:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 8001256:	e004      	b.n	8001262 <button2_fsm+0x62>
			return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e003      	b.n	8001264 <button2_fsm+0x64>
	default:
		return 0;
 800125c:	2300      	movs	r3, #0
 800125e:	e001      	b.n	8001264 <button2_fsm+0x64>
		break;
 8001260:	bf00      	nop
		break;
	}
	return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000088 	.word	0x20000088
 800126c:	2000008b 	.word	0x2000008b
 8001270:	2000008c 	.word	0x2000008c

08001274 <button1_fsm>:
bool button1_fsm(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	switch (button_st[1]) {
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <button1_fsm+0xc0>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d035      	beq.n	80012ec <button1_fsm+0x78>
 8001280:	2b02      	cmp	r3, #2
 8001282:	dc4f      	bgt.n	8001324 <button1_fsm+0xb0>
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <button1_fsm+0x1a>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d019      	beq.n	80012c0 <button1_fsm+0x4c>
 800128c:	e04a      	b.n	8001324 <button1_fsm+0xb0>
	case release:
		if (is_button_pressed(1) == 1) {
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff fca8 	bl	8000be4 <is_button_pressed>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10a      	bne.n	80012b0 <button1_fsm+0x3c>
			// to do
			light_pre_st = light_st;
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <button1_fsm+0xc4>)
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <button1_fsm+0xc8>)
 80012a0:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1;
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <button1_fsm+0xc4>)
 80012a4:	2205      	movs	r2, #5
 80012a6:	701a      	strb	r2, [r3, #0]
			button_st[1] = pressed;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <button1_fsm+0xc0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(1) == ERROR)
			return 0;
		break;
 80012ae:	e03b      	b.n	8001328 <button1_fsm+0xb4>
		} else if (is_button_pressed(1) == ERROR)
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fc97 	bl	8000be4 <is_button_pressed>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d135      	bne.n	8001328 <button1_fsm+0xb4>
			return 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	e037      	b.n	8001330 <button1_fsm+0xbc>
	case pressed:
		if (!is_button_pressed(1)) {
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fc8f 	bl	8000be4 <is_button_pressed>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <button1_fsm+0x60>
			button_st[1] = release;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <button1_fsm+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(1) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 80012d2:	e02c      	b.n	800132e <button1_fsm+0xba>
		} else if (is_button_long_pressed(1) == 1) {
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fc9f 	bl	8000c18 <is_button_long_pressed>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d103      	bne.n	80012e8 <button1_fsm+0x74>
			button_st[1] = long_pressed;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <button1_fsm+0xc0>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	705a      	strb	r2, [r3, #1]
		break;
 80012e6:	e022      	b.n	800132e <button1_fsm+0xba>
			return 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e021      	b.n	8001330 <button1_fsm+0xbc>
	case long_pressed:
		// to do
		if (light_st != INCREASE_BY_1_OVER_TIME) {
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <button1_fsm+0xc4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d006      	beq.n	8001302 <button1_fsm+0x8e>
			light_pre_st = light_st;
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <button1_fsm+0xc4>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <button1_fsm+0xc8>)
 80012fa:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1_OVER_TIME;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <button1_fsm+0xc4>)
 80012fe:	2206      	movs	r2, #6
 8001300:	701a      	strb	r2, [r3, #0]
		}
		if (!is_button_pressed(1)) {
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fc6e 	bl	8000be4 <is_button_pressed>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10e      	bne.n	800132c <button1_fsm+0xb8>
			light_st = light_pre_st;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <button1_fsm+0xc8>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <button1_fsm+0xc4>)
 8001314:	701a      	strb	r2, [r3, #0]
			light_pre_st = INCREASE_BY_1_OVER_TIME;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <button1_fsm+0xc8>)
 8001318:	2206      	movs	r2, #6
 800131a:	701a      	strb	r2, [r3, #0]
			button_st[1] = release;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <button1_fsm+0xc0>)
 800131e:	2200      	movs	r2, #0
 8001320:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001322:	e003      	b.n	800132c <button1_fsm+0xb8>
	default:
		return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e003      	b.n	8001330 <button1_fsm+0xbc>
		break;
 8001328:	bf00      	nop
 800132a:	e000      	b.n	800132e <button1_fsm+0xba>
		break;
 800132c:	bf00      	nop
		break;
	}
	return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000088 	.word	0x20000088
 8001338:	2000008b 	.word	0x2000008b
 800133c:	2000008c 	.word	0x2000008c

08001340 <control_traffic_light>:
void display7SEG(unsigned short i);
void update7led(uint8_t i);
void init_traffic_light(void);
void init7SEG(void);

void control_traffic_light(unsigned i, GPIO_PinState red, GPIO_PinState yellow, GPIO_PinState green){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4603      	mov	r3, r0
 8001350:	70fb      	strb	r3, [r7, #3]
 8001352:	460b      	mov	r3, r1
 8001354:	70bb      	strb	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(traffic_light[i].port, traffic_light[i].red, !red);
 800135a:	4929      	ldr	r1, [pc, #164]	; (8001400 <control_traffic_light+0xc0>)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	4925      	ldr	r1, [pc, #148]	; (8001400 <control_traffic_light+0xc0>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3308      	adds	r3, #8
 800137a:	8819      	ldrh	r1, [r3, #0]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf0c      	ite	eq
 8001382:	2301      	moveq	r3, #1
 8001384:	2300      	movne	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	f000 ffbe 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(traffic_light[i].port, traffic_light[i].green, !green);
 800138e:	491c      	ldr	r1, [pc, #112]	; (8001400 <control_traffic_light+0xc0>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	4918      	ldr	r1, [pc, #96]	; (8001400 <control_traffic_light+0xc0>)
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	3304      	adds	r3, #4
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	f000 ffa4 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(traffic_light[i].port, traffic_light[i].yellow, !yellow);
 80013c2:	490f      	ldr	r1, [pc, #60]	; (8001400 <control_traffic_light+0xc0>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	490b      	ldr	r1, [pc, #44]	; (8001400 <control_traffic_light+0xc0>)
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3306      	adds	r3, #6
 80013e2:	8819      	ldrh	r1, [r3, #0]
 80013e4:	78bb      	ldrb	r3, [r7, #2]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	f000 ff8a 	bl	800230a <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000a4 	.word	0x200000a4

08001404 <init_led>:
void init_led(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	init_traffic_light();
 8001408:	f000 f804 	bl	8001414 <init_traffic_light>
	init7SEG();
 800140c:	f000 f9f6 	bl	80017fc <init7SEG>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <init_traffic_light>:
void init_traffic_light(void){
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	traffic_light[0].port = TL_PORT1;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <init_traffic_light+0x3c>)
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <init_traffic_light+0x40>)
 800141c:	601a      	str	r2, [r3, #0]
	traffic_light[0].green = TL_GREEN1;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <init_traffic_light+0x3c>)
 8001420:	2202      	movs	r2, #2
 8001422:	809a      	strh	r2, [r3, #4]
	traffic_light[0].yellow =TL_YELLOW1;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <init_traffic_light+0x3c>)
 8001426:	2204      	movs	r2, #4
 8001428:	80da      	strh	r2, [r3, #6]
	traffic_light[0].red =TL_RED1;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <init_traffic_light+0x3c>)
 800142c:	2208      	movs	r2, #8
 800142e:	811a      	strh	r2, [r3, #8]
	traffic_light[1].port = TL_PORT2;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <init_traffic_light+0x3c>)
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <init_traffic_light+0x40>)
 8001434:	60da      	str	r2, [r3, #12]
	traffic_light[1].green=TL_GREEN2;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <init_traffic_light+0x3c>)
 8001438:	2210      	movs	r2, #16
 800143a:	821a      	strh	r2, [r3, #16]
	traffic_light[1].yellow=TL_YELLOW2;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <init_traffic_light+0x3c>)
 800143e:	2220      	movs	r2, #32
 8001440:	825a      	strh	r2, [r3, #18]
	traffic_light[1].red=TL_RED2;
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <init_traffic_light+0x3c>)
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	829a      	strh	r2, [r3, #20]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200000a4 	.word	0x200000a4
 8001454:	40010800 	.word	0x40010800

08001458 <scan7SEG>:
void scan7SEG(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	update7led(idx_7led++);
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <scan7SEG+0x28>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4907      	ldr	r1, [pc, #28]	; (8001480 <scan7SEG+0x28>)
 8001464:	600a      	str	r2, [r1, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f863 	bl	8001534 <update7led>
	if(idx_7led >= 4){
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <scan7SEG+0x28>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d902      	bls.n	800147c <scan7SEG+0x24>
		idx_7led = 0;
 8001476:	4b02      	ldr	r3, [pc, #8]	; (8001480 <scan7SEG+0x28>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	}
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000bc 	.word	0x200000bc

08001484 <update_led_buf>:
void update_led_buf(unsigned value1, unsigned value2) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	if (0 < value1 && value1 < 100 && 0 < value2 && value2 < 100) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d032      	beq.n	80014fa <update_led_buf+0x76>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b63      	cmp	r3, #99	; 0x63
 8001498:	d82f      	bhi.n	80014fa <update_led_buf+0x76>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02c      	beq.n	80014fa <update_led_buf+0x76>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b63      	cmp	r3, #99	; 0x63
 80014a4:	d829      	bhi.n	80014fa <update_led_buf+0x76>
		led_buffer[0] = value1 / 10;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a16      	ldr	r2, [pc, #88]	; (8001504 <update_led_buf+0x80>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <update_led_buf+0x84>)
 80014b4:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = value1 % 10;
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <update_led_buf+0x80>)
 80014ba:	fba3 2301 	umull	r2, r3, r3, r1
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1aca      	subs	r2, r1, r3
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <update_led_buf+0x84>)
 80014ce:	705a      	strb	r2, [r3, #1]
		led_buffer[2] = value2 / 10;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <update_led_buf+0x80>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <update_led_buf+0x84>)
 80014de:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = value2 % 10;
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <update_led_buf+0x80>)
 80014e4:	fba3 2301 	umull	r2, r3, r3, r1
 80014e8:	08da      	lsrs	r2, r3, #3
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	1aca      	subs	r2, r1, r3
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <update_led_buf+0x84>)
 80014f8:	70da      	strb	r2, [r3, #3]
	}
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	20000020 	.word	0x20000020

0800150c <off_all7led>:
void off_all7led(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	uint16_t pin = SEG7_1 | SEG7_2 | SEG7_3 | SEG7_4;
 8001512:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001516:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(led.port, pin, 1);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <off_all7led+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	88f9      	ldrh	r1, [r7, #6]
 800151e:	2201      	movs	r2, #1
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fef2 	bl	800230a <HAL_GPIO_WritePin>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000090 	.word	0x20000090

08001534 <update7led>:
void update7led(uint8_t i) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	switch (i) {
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d84e      	bhi.n	80015e2 <update7led+0xae>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <update7led+0x18>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800157d 	.word	0x0800157d
 8001554:	0800159f 	.word	0x0800159f
 8001558:	080015c1 	.word	0x080015c1
	case 0:
		off_all7led();
 800155c:	f7ff ffd6 	bl	800150c <off_all7led>
		HAL_GPIO_WritePin(led.port, SEG7_1, 0);
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <update7led+0xbc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fece 	bl	800230a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <update7led+0xc0>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f88d 	bl	8001694 <display7SEG>
		break;
 800157a:	e035      	b.n	80015e8 <update7led+0xb4>
	case 1:
		off_all7led();
 800157c:	f7ff ffc6 	bl	800150c <off_all7led>
		HAL_GPIO_WritePin(led.port, SEG7_2, 0);
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <update7led+0xbc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	4618      	mov	r0, r3
 800158c:	f000 febd 	bl	800230a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <update7led+0xc0>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f87c 	bl	8001694 <display7SEG>
		break;
 800159c:	e024      	b.n	80015e8 <update7led+0xb4>
	case 2:
		off_all7led();
 800159e:	f7ff ffb5 	bl	800150c <off_all7led>
		HAL_GPIO_WritePin(led.port, SEG7_3, 0);
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <update7led+0xbc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 feac 	bl	800230a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <update7led+0xc0>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f86b 	bl	8001694 <display7SEG>
		break;
 80015be:	e013      	b.n	80015e8 <update7led+0xb4>
	case 3:
		off_all7led();
 80015c0:	f7ff ffa4 	bl	800150c <off_all7led>
		HAL_GPIO_WritePin(led.port, SEG7_4, 0);
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <update7led+0xbc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fe9b 	bl	800230a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <update7led+0xc0>)
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f85a 	bl	8001694 <display7SEG>
		break;
 80015e0:	e002      	b.n	80015e8 <update7led+0xb4>
	default:
		off_all7led();
 80015e2:	f7ff ff93 	bl	800150c <off_all7led>
	}
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000090 	.word	0x20000090
 80015f4:	20000020 	.word	0x20000020

080015f8 <display>:
void display(GPIO_PinState a, GPIO_PinState b, GPIO_PinState c, GPIO_PinState d,
		GPIO_PinState e, GPIO_PinState f, GPIO_PinState g) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	4603      	mov	r3, r0
 800160c:	71bb      	strb	r3, [r7, #6]
 800160e:	460b      	mov	r3, r1
 8001610:	717b      	strb	r3, [r7, #5]
 8001612:	4613      	mov	r3, r2
 8001614:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(led.port, led.pin_a, a);
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <display+0x98>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <display+0x98>)
 800161c:	8891      	ldrh	r1, [r2, #4]
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fe72 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_b, b);
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <display+0x98>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <display+0x98>)
 800162c:	88d1      	ldrh	r1, [r2, #6]
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fe6a 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_c, c);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <display+0x98>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <display+0x98>)
 800163c:	8911      	ldrh	r1, [r2, #8]
 800163e:	797a      	ldrb	r2, [r7, #5]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fe62 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_d, d);
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <display+0x98>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <display+0x98>)
 800164c:	8951      	ldrh	r1, [r2, #10]
 800164e:	793a      	ldrb	r2, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fe5a 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_e, e);
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <display+0x98>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <display+0x98>)
 800165c:	8991      	ldrh	r1, [r2, #12]
 800165e:	7e3a      	ldrb	r2, [r7, #24]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fe52 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_f, f);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <display+0x98>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <display+0x98>)
 800166c:	89d1      	ldrh	r1, [r2, #14]
 800166e:	7f3a      	ldrb	r2, [r7, #28]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fe4a 	bl	800230a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led.port, led.pin_g, g);
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <display+0x98>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <display+0x98>)
 800167c:	8a11      	ldrh	r1, [r2, #16]
 800167e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fe41 	bl	800230a <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000090 	.word	0x20000090

08001694 <display7SEG>:
void display7SEG(unsigned short i) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af04      	add	r7, sp, #16
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
	switch (i) {
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	f200 8099 	bhi.w	80017d8 <display7SEG+0x144>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <display7SEG+0x18>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	080016ef 	.word	0x080016ef
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001723 	.word	0x08001723
 80016bc:	0800173d 	.word	0x0800173d
 80016c0:	08001757 	.word	0x08001757
 80016c4:	08001771 	.word	0x08001771
 80016c8:	0800178b 	.word	0x0800178b
 80016cc:	080017a5 	.word	0x080017a5
 80016d0:	080017bf 	.word	0x080017bf
	case 0:
		display(0, 0, 0, 0, 0, 0, 1);
 80016d4:	2301      	movs	r3, #1
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2300      	movs	r3, #0
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff86 	bl	80015f8 <display>
		break;
 80016ec:	e081      	b.n	80017f2 <display7SEG+0x15e>
	case 1:
		display(1, 0, 0, 1, 1, 1, 1);
 80016ee:	2301      	movs	r3, #1
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2301      	movs	r3, #1
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2301      	movs	r3, #1
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff ff79 	bl	80015f8 <display>
		break;
 8001706:	e074      	b.n	80017f2 <display7SEG+0x15e>
	case 2:
		display(0, 0, 1, 0, 0, 1, 0);
 8001708:	2300      	movs	r3, #0
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	2201      	movs	r2, #1
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff6c 	bl	80015f8 <display>
		break;
 8001720:	e067      	b.n	80017f2 <display7SEG+0x15e>
	case 3:
		display(0, 0, 0, 0, 1, 1, 0);
 8001722:	2300      	movs	r3, #0
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2301      	movs	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2301      	movs	r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ff5f 	bl	80015f8 <display>
		break;
 800173a:	e05a      	b.n	80017f2 <display7SEG+0x15e>
	case 4:
		display(1, 0, 0, 1, 1, 0, 0);
 800173c:	2300      	movs	r3, #0
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2300      	movs	r3, #0
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2301      	movs	r3, #1
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff ff52 	bl	80015f8 <display>
		break;
 8001754:	e04d      	b.n	80017f2 <display7SEG+0x15e>
	case 5:
		display(0, 1, 0, 0, 1, 0, 0);
 8001756:	2300      	movs	r3, #0
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	2301      	movs	r3, #1
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	2200      	movs	r2, #0
 8001766:	2101      	movs	r1, #1
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff ff45 	bl	80015f8 <display>
		break;
 800176e:	e040      	b.n	80017f2 <display7SEG+0x15e>
	case 6:
		display(0, 1, 0, 0, 0, 0, 0);
 8001770:	2300      	movs	r3, #0
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff ff38 	bl	80015f8 <display>
		break;
 8001788:	e033      	b.n	80017f2 <display7SEG+0x15e>
	case 7:
		display(0, 0, 0, 1, 1, 1, 1);
 800178a:	2301      	movs	r3, #1
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2301      	movs	r3, #1
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff ff2b 	bl	80015f8 <display>
		break;
 80017a2:	e026      	b.n	80017f2 <display7SEG+0x15e>
	case 8:
		display(0, 0, 0, 0, 0, 0, 0);
 80017a4:	2300      	movs	r3, #0
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff ff1e 	bl	80015f8 <display>
		break;
 80017bc:	e019      	b.n	80017f2 <display7SEG+0x15e>
	case 9:
		display(0, 0, 0, 0, 1, 0, 0);
 80017be:	2300      	movs	r3, #0
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ff11 	bl	80015f8 <display>
		break;
 80017d6:	e00c      	b.n	80017f2 <display7SEG+0x15e>
	default:
		display(1, 1, 1, 1, 1, 1, 1);
 80017d8:	2301      	movs	r3, #1
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	2301      	movs	r3, #1
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	2201      	movs	r2, #1
 80017e8:	2101      	movs	r1, #1
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff ff04 	bl	80015f8 <display>
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <init7SEG>:
void init7SEG(void) {
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	led.port = SEG7_PORT;
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <init7SEG+0x3c>)
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <init7SEG+0x40>)
 8001804:	601a      	str	r2, [r3, #0]
	led.pin_a = SEG7_A;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <init7SEG+0x3c>)
 8001808:	2201      	movs	r2, #1
 800180a:	809a      	strh	r2, [r3, #4]
	led.pin_b = SEG7_B;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <init7SEG+0x3c>)
 800180e:	2202      	movs	r2, #2
 8001810:	80da      	strh	r2, [r3, #6]
	led.pin_c = SEG7_C;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <init7SEG+0x3c>)
 8001814:	2204      	movs	r2, #4
 8001816:	811a      	strh	r2, [r3, #8]
	led.pin_d = SEG7_D;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <init7SEG+0x3c>)
 800181a:	2208      	movs	r2, #8
 800181c:	815a      	strh	r2, [r3, #10]
	led.pin_e = SEG7_E;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <init7SEG+0x3c>)
 8001820:	2210      	movs	r2, #16
 8001822:	819a      	strh	r2, [r3, #12]
	led.pin_f = SEG7_F;
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <init7SEG+0x3c>)
 8001826:	2220      	movs	r2, #32
 8001828:	81da      	strh	r2, [r3, #14]
	led.pin_g = SEG7_G;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <init7SEG+0x3c>)
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	821a      	strh	r2, [r3, #16]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000090 	.word	0x20000090
 800183c:	40010c00 	.word	0x40010c00

08001840 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001844:	f000 fa56 	bl	8001cf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001848:	f000 f832 	bl	80018b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800184c:	f000 f8b8 	bl	80019c0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001850:	f000 f86a 	bl	8001928 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <main+0x6c>)
 8001856:	f001 f99f 	bl	8002b98 <HAL_TIM_Base_Start_IT>
	set_timer(0, SCAN_7SEGLED_TIME);
 800185a:	2132      	movs	r1, #50	; 0x32
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f923 	bl	8001aa8 <set_timer>
	set_timer(1, ONE_SECOND);
 8001862:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001866:	2001      	movs	r0, #1
 8001868:	f000 f91e 	bl	8001aa8 <set_timer>
	set_timer(2, READ_BUTTON_TIME);
 800186c:	210a      	movs	r1, #10
 800186e:	2002      	movs	r0, #2
 8001870:	f000 f91a 	bl	8001aa8 <set_timer>
	set_timer(3, TOGGLE_TIME);
 8001874:	21fa      	movs	r1, #250	; 0xfa
 8001876:	2003      	movs	r0, #3
 8001878:	f000 f916 	bl	8001aa8 <set_timer>
	set_timer(4, INCREASE_TIME);
 800187c:	21fa      	movs	r1, #250	; 0xfa
 800187e:	2004      	movs	r0, #4
 8001880:	f000 f912 	bl	8001aa8 <set_timer>
	init_led();
 8001884:	f7ff fdbe 	bl	8001404 <init_led>
	button_init();
 8001888:	f7ff f84e 	bl	8000928 <button_init>
	while (1) {
/*		if (!is_timer_on(0)) {
			scan7SEG();
			set_timer(0, SCAN_7SEGLED_TIME);
		}*/
		if (!is_timer_on(2)) {
 800188c:	2002      	movs	r0, #2
 800188e:	f000 f969 	bl	8001b64 <is_timer_on>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <main+0x64>
			button_read();
 8001898:	f7ff f8bc 	bl	8000a14 <button_read>
			set_timer(2, READ_BUTTON_TIME);
 800189c:	210a      	movs	r1, #10
 800189e:	2002      	movs	r0, #2
 80018a0:	f000 f902 	bl	8001aa8 <set_timer>
		}
		fsm();
 80018a4:	f7ff fb18 	bl	8000ed8 <fsm>
		if (!is_timer_on(2)) {
 80018a8:	e7f0      	b.n	800188c <main+0x4c>
 80018aa:	bf00      	nop
 80018ac:	200000c0 	.word	0x200000c0

080018b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b090      	sub	sp, #64	; 0x40
 80018b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	2228      	movs	r2, #40	; 0x28
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fd18 	bl	80032f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018da:	2310      	movs	r3, #16
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018e2:	f107 0318 	add.w	r3, r7, #24
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd28 	bl	800233c <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x46>
		Error_Handler();
 80018f2:	f000 f8c9 	bl	8001a88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f000 ff96 	bl	8002840 <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x6e>
		Error_Handler();
 800191a:	f000 f8b5 	bl	8001a88 <Error_Handler>
	}
}
 800191e:	bf00      	nop
 8001920:	3740      	adds	r7, #64	; 0x40
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_TIM2_Init+0x94>)
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_TIM2_Init+0x94>)
 800194e:	224f      	movs	r2, #79	; 0x4f
 8001950:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_TIM2_Init+0x94>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_TIM2_Init+0x94>)
 800195a:	2263      	movs	r2, #99	; 0x63
 800195c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_TIM2_Init+0x94>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <MX_TIM2_Init+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <MX_TIM2_Init+0x94>)
 800196c:	f001 f8c4 	bl	8002af8 <HAL_TIM_Base_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x52>
		Error_Handler();
 8001976:	f000 f887 	bl	8001a88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_TIM2_Init+0x94>)
 8001988:	f001 fa60 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x6e>
		Error_Handler();
 8001992:	f000 f879 	bl	8001a88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <MX_TIM2_Init+0x94>)
 80019a4:	f001 fc36 	bl	8003214 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80019ae:	f000 f86b 	bl	8001a88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000c0 	.word	0x200000c0

080019c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MX_GPIO_Init+0xbc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001a04:	2200      	movs	r2, #0
 8001a06:	f240 417e 	movw	r1, #1150	; 0x47e
 8001a0a:	481d      	ldr	r0, [pc, #116]	; (8001a80 <MX_GPIO_Init+0xc0>)
 8001a0c:	f000 fc7d 	bl	800230a <HAL_GPIO_WritePin>
			GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
					| GPIO_PIN_6 | GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001a10:	2200      	movs	r2, #0
 8001a12:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001a16:	481b      	ldr	r0, [pc, #108]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a18:	f000 fc77 	bl	800230a <HAL_GPIO_WritePin>
					| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
					| GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA2 PA3 PA4
	 PA5 PA6 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001a1c:	f240 437e 	movw	r3, #1150	; 0x47e
 8001a20:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <MX_GPIO_Init+0xc0>)
 8001a36:	f000 facd 	bl	8001fd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA8 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001a3a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a3e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_GPIO_Init+0xc0>)
 8001a50:	f000 fac0 	bl	8001fd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB3 PB4 PB5 PB6
	 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 8001a54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a58:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_GPIO_Init+0xc4>)
 8001a6e:	f000 fab1 	bl	8001fd4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00

08001a88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>

08001a92 <HAL_TIM_PeriodElapsedCallback>:
 * timer[1]: to display traffic led
 * timer[2]: to read button
 * timer[3]: to toggle led
 * timer[4]: to increase value by 1 over time
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	run_timer();
 8001a9a:	f000 f831 	bl	8001b00 <run_timer>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <set_timer>:
//time unit is ms
void set_timer(unsigned i, unsigned int time) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fc87 	bl	80003d0 <__aeabi_ui2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <set_timer+0x50>)
 8001ac8:	f7fe fe26 	bl	8000718 <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ff08 	bl	80008e8 <__aeabi_d2uiz>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <set_timer+0x54>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <set_timer+0x54>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	408f4000 	.word	0x408f4000
 8001afc:	20000108 	.word	0x20000108

08001b00 <run_timer>:
void run_timer(void) {
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	e01f      	b.n	8001b4c <run_timer+0x4c>
		if (timer[i].state) {
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <run_timer+0x60>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d016      	beq.n	8001b46 <run_timer+0x46>
			timer[i].count--;
 8001b18:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <run_timer+0x60>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <run_timer+0x60>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <run_timer+0x60>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <run_timer+0x46>
				timer[i].state = 0;
 8001b3c:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <run_timer+0x60>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2100      	movs	r1, #0
 8001b42:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d9dc      	bls.n	8001b0c <run_timer+0xc>
			}
		}
	}
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000108 	.word	0x20000108

08001b64 <is_timer_on>:
bool is_timer_on(unsigned i) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <is_timer_on+0x24>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000108 	.word	0x20000108

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_MspInit+0x5c>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6193      	str	r3, [r2, #24]
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_MspInit+0x5c>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_MspInit+0x5c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_MspInit+0x60>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_MspInit+0x60>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000

08001bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d113      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_TIM_Base_MspInit+0x44>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_TIM_Base_MspInit+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_TIM_Base_MspInit+0x44>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 f9a1 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f000 f9ba 	bl	8001f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f000 f87f 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM2_IRQHandler+0x10>)
 8001c8e:	f000 ffd5 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200000c0 	.word	0x200000c0

08001c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca8:	f7ff fff8 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cae:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cc4:	4c09      	ldr	r4, [pc, #36]	; (8001cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f001 fb17 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd6:	f7ff fdb3 	bl	8001840 <main>
  bx lr
 8001cda:	4770      	bx	lr
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ce4:	08003390 	.word	0x08003390
  ldr r2, =_sbss
 8001ce8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001cec:	20000134 	.word	0x20000134

08001cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC1_2_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_Init+0x28>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_Init+0x28>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 f923 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	200f      	movs	r0, #15
 8001d0c:	f000 f808 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff ff3c 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f93b 	bl	8001fba <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 f903 	bl	8001f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000024 	.word	0x20000024
 8001d78:	2000002c 	.word	0x2000002c
 8001d7c:	20000028 	.word	0x20000028

08001d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x1c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x20>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_IncTick+0x20>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	2000002c 	.word	0x2000002c
 8001da0:	20000130 	.word	0x20000130

08001da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <HAL_GetTick+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000130 	.word	0x20000130

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <__NVIC_EnableIRQ+0x34>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f7ff ff90 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff2d 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff42 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff90 	bl	8001ea8 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5f 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff35 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b08b      	sub	sp, #44	; 0x2c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	e169      	b.n	80022bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8158 	bne.w	80022b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a9a      	ldr	r2, [pc, #616]	; (8002274 <HAL_GPIO_Init+0x2a0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d05e      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002010:	4a98      	ldr	r2, [pc, #608]	; (8002274 <HAL_GPIO_Init+0x2a0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d875      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002016:	4a98      	ldr	r2, [pc, #608]	; (8002278 <HAL_GPIO_Init+0x2a4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d058      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 800201c:	4a96      	ldr	r2, [pc, #600]	; (8002278 <HAL_GPIO_Init+0x2a4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d86f      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002022:	4a96      	ldr	r2, [pc, #600]	; (800227c <HAL_GPIO_Init+0x2a8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d052      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002028:	4a94      	ldr	r2, [pc, #592]	; (800227c <HAL_GPIO_Init+0x2a8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d869      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800202e:	4a94      	ldr	r2, [pc, #592]	; (8002280 <HAL_GPIO_Init+0x2ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d04c      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002034:	4a92      	ldr	r2, [pc, #584]	; (8002280 <HAL_GPIO_Init+0x2ac>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d863      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800203a:	4a92      	ldr	r2, [pc, #584]	; (8002284 <HAL_GPIO_Init+0x2b0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d046      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
 8002040:	4a90      	ldr	r2, [pc, #576]	; (8002284 <HAL_GPIO_Init+0x2b0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d85d      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 8002046:	2b12      	cmp	r3, #18
 8002048:	d82a      	bhi.n	80020a0 <HAL_GPIO_Init+0xcc>
 800204a:	2b12      	cmp	r3, #18
 800204c:	d859      	bhi.n	8002102 <HAL_GPIO_Init+0x12e>
 800204e:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <HAL_GPIO_Init+0x80>)
 8002050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002054:	080020cf 	.word	0x080020cf
 8002058:	080020a9 	.word	0x080020a9
 800205c:	080020bb 	.word	0x080020bb
 8002060:	080020fd 	.word	0x080020fd
 8002064:	08002103 	.word	0x08002103
 8002068:	08002103 	.word	0x08002103
 800206c:	08002103 	.word	0x08002103
 8002070:	08002103 	.word	0x08002103
 8002074:	08002103 	.word	0x08002103
 8002078:	08002103 	.word	0x08002103
 800207c:	08002103 	.word	0x08002103
 8002080:	08002103 	.word	0x08002103
 8002084:	08002103 	.word	0x08002103
 8002088:	08002103 	.word	0x08002103
 800208c:	08002103 	.word	0x08002103
 8002090:	08002103 	.word	0x08002103
 8002094:	08002103 	.word	0x08002103
 8002098:	080020b1 	.word	0x080020b1
 800209c:	080020c5 	.word	0x080020c5
 80020a0:	4a79      	ldr	r2, [pc, #484]	; (8002288 <HAL_GPIO_Init+0x2b4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020a6:	e02c      	b.n	8002102 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	623b      	str	r3, [r7, #32]
          break;
 80020ae:	e029      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	3304      	adds	r3, #4
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e024      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	3308      	adds	r3, #8
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e01f      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	330c      	adds	r3, #12
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e01a      	b.n	8002104 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d6:	2304      	movs	r3, #4
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e013      	b.n	8002104 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e4:	2308      	movs	r3, #8
 80020e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	611a      	str	r2, [r3, #16]
          break;
 80020ee:	e009      	b.n	8002104 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f0:	2308      	movs	r3, #8
 80020f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	615a      	str	r2, [r3, #20]
          break;
 80020fa:	e003      	b.n	8002104 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x130>
          break;
 8002102:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2bff      	cmp	r3, #255	; 0xff
 8002108:	d801      	bhi.n	800210e <HAL_GPIO_Init+0x13a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	e001      	b.n	8002112 <HAL_GPIO_Init+0x13e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d802      	bhi.n	8002120 <HAL_GPIO_Init+0x14c>
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	e002      	b.n	8002126 <HAL_GPIO_Init+0x152>
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	3b08      	subs	r3, #8
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	210f      	movs	r1, #15
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	6a39      	ldr	r1, [r7, #32]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80b1 	beq.w	80022b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002154:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_GPIO_Init+0x2b8>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4a4c      	ldr	r2, [pc, #304]	; (800228c <HAL_GPIO_Init+0x2b8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6193      	str	r3, [r2, #24]
 8002160:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_GPIO_Init+0x2b8>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800216c:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_GPIO_Init+0x2bc>)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <HAL_GPIO_Init+0x2c0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_GPIO_Init+0x1ec>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <HAL_GPIO_Init+0x2c4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_GPIO_Init+0x1e8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3e      	ldr	r2, [pc, #248]	; (800229c <HAL_GPIO_Init+0x2c8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x1e4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <HAL_GPIO_Init+0x2cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_GPIO_Init+0x1e0>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021c0:	2300      	movs	r3, #0
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d2:	492f      	ldr	r1, [pc, #188]	; (8002290 <HAL_GPIO_Init+0x2bc>)
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	492c      	ldr	r1, [pc, #176]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	4928      	ldr	r1, [pc, #160]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4922      	ldr	r1, [pc, #136]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	43db      	mvns	r3, r3
 800222a:	491e      	ldr	r1, [pc, #120]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 800222c:	4013      	ands	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4918      	ldr	r1, [pc, #96]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	43db      	mvns	r3, r3
 8002252:	4914      	ldr	r1, [pc, #80]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002254:	4013      	ands	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d021      	beq.n	80022a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <HAL_GPIO_Init+0x2d0>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e021      	b.n	80022b6 <HAL_GPIO_Init+0x2e2>
 8002272:	bf00      	nop
 8002274:	10320000 	.word	0x10320000
 8002278:	10310000 	.word	0x10310000
 800227c:	10220000 	.word	0x10220000
 8002280:	10210000 	.word	0x10210000
 8002284:	10120000 	.word	0x10120000
 8002288:	10110000 	.word	0x10110000
 800228c:	40021000 	.word	0x40021000
 8002290:	40010000 	.word	0x40010000
 8002294:	40010800 	.word	0x40010800
 8002298:	40010c00 	.word	0x40010c00
 800229c:	40011000 	.word	0x40011000
 80022a0:	40011400 	.word	0x40011400
 80022a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_GPIO_Init+0x304>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	4909      	ldr	r1, [pc, #36]	; (80022d8 <HAL_GPIO_Init+0x304>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3301      	adds	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f47f ae8e 	bne.w	8001fe8 <HAL_GPIO_Init+0x14>
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	372c      	adds	r7, #44	; 0x2c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231a:	787b      	ldrb	r3, [r7, #1]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002326:	e003      	b.n	8002330 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	041a      	lsls	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	611a      	str	r2, [r3, #16]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e272      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d112      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 8002374:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <HAL_RCC_OscConfig+0x12c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d168      	bne.n	8002468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e24c      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76>
 80023a4:	4b80      	ldr	r3, [pc, #512]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e02e      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0xbc>
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a71      	ldr	r2, [pc, #452]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fcc4 	bl	8001da4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fcc0 	bl	8001da4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e200      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xe4>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fcb0 	bl	8001da4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fcac 	bl	8001da4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ec      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x10c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c0      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4939      	ldr	r1, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7ff fc65 	bl	8001da4 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff fc61 	bl	8001da4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fc44 	bl	8001da4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7ff fc40 	bl	8001da4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e180      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fc24 	bl	8001da4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff fc20 	bl	8001da4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e160      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 fa9c 	bl	8002abc <RCC_Delay>
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7ff fc0a 	bl	8001da4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff fc06 	bl	8001da4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e146      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420000 	.word	0x42420000
 80025b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e9      	bne.n	8002594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a6 	beq.w	800271a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b88      	ldr	r3, [pc, #544]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a87      	ldr	r2, [pc, #540]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b85      	ldr	r3, [pc, #532]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff fbc7 	bl	8001da4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff fbc3 	bl	8001da4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e103      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b75      	ldr	r3, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002656:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a69      	ldr	r2, [pc, #420]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a66      	ldr	r2, [pc, #408]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x356>
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002692:	4b5b      	ldr	r3, [pc, #364]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a5a      	ldr	r2, [pc, #360]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b58      	ldr	r3, [pc, #352]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a57      	ldr	r2, [pc, #348]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fb77 	bl	8001da4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff fb73 	bl	8001da4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x37e>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff fb61 	bl	8001da4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7ff fb5d 	bl	8001da4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09b      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d061      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d146      	bne.n	80027c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff fb31 	bl	8001da4 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7ff fb2d 	bl	8001da4 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e06d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4921      	ldr	r1, [pc, #132]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	430b      	orrs	r3, r1
 8002792:	491b      	ldr	r1, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fb01 	bl	8001da4 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff fafd 	bl	8001da4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
 80027c4:	e035      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff faea 	bl	8001da4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff fae6 	bl	8001da4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e026      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x498>
 80027f2:	e01e      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e019      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x500>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7ff fa38 	bl	8001da4 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7ff fa34 	bl	8001da4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4922      	ldr	r1, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1cc>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f996 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08003364 	.word	0x08003364
 8002a0c:	20000024 	.word	0x20000024
 8002a10:	20000028 	.word	0x20000028

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x36>
 8002a42:	e027      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	e027      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	fb03 f202 	mul.w	r2, r3, r2
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e004      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	613b      	str	r3, [r7, #16]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	693b      	ldr	r3, [r7, #16]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	08003374 	.word	0x08003374
 8002ab4:	08003384 	.word	0x08003384
 8002ab8:	003d0900 	.word	0x003d0900

08002abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <RCC_Delay+0x34>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <RCC_Delay+0x38>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0a5b      	lsrs	r3, r3, #9
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad8:	bf00      	nop
  }
  while (Delay --);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	60fa      	str	r2, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <RCC_Delay+0x1c>
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	20000024 	.word	0x20000024
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e041      	b.n	8002b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f866 	bl	8001bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 fa74 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e03a      	b.n	8002c26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_Base_Start_IT+0x98>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_TIM_Base_Start_IT+0x9c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIM_Base_Start_IT+0x58>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d010      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9b4 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9a7 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9b6 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f98a 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f97d 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f98c 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f960 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f953 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f962 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f936 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f929 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f938 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fe69 	bl	8001a92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa7b 	bl	80032e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8fc 	bl	8003010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa46 	bl	80032d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0b4      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x186>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d03e      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	f200 8087 	bhi.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	f000 8086 	beq.w	8002fbe <HAL_TIM_ConfigClockSource+0x172>
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d87f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d01a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d87b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d050      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d877      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d03c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d873      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d058      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d86f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d064      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d060      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d867      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d05a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	e062      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	f000 f968 	bl	80031d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e04f      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	f000 f951 	bl	80031d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
      break;
 8002f44:	e03c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 f8c8 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2150      	movs	r1, #80	; 0x50
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f91f 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e02c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 f8e6 	bl	8003144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2160      	movs	r1, #96	; 0x60
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f90f 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f8a8 	bl	80030e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f8ff 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e00c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 f8f6 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <TIM_Base_SetConfig+0xb8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d007      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <TIM_Base_SetConfig+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0x30>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <TIM_Base_SetConfig+0xc0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <TIM_Base_SetConfig+0xb8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <TIM_Base_SetConfig+0xbc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <TIM_Base_SetConfig+0xc0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <TIM_Base_SetConfig+0xb8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d103      	bne.n	80030cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	615a      	str	r2, [r3, #20]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800

080030e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 030a 	bic.w	r3, r3, #10
 8003124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0210 	bic.w	r2, r3, #16
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	031b      	lsls	r3, r3, #12
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 0307 	orr.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b087      	sub	sp, #28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003228:	2302      	movs	r3, #2
 800322a:	e046      	b.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d009      	beq.n	800328e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10c      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4313      	orrs	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800

080032d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <memset>:
 80032f4:	4603      	mov	r3, r0
 80032f6:	4402      	add	r2, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <memset+0xa>
 80032fc:	4770      	bx	lr
 80032fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003302:	e7f9      	b.n	80032f8 <memset+0x4>

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2600      	movs	r6, #0
 8003308:	4d0c      	ldr	r5, [pc, #48]	; (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 f81a 	bl	800334c <_init>
 8003318:	2600      	movs	r6, #0
 800331a:	4d0a      	ldr	r5, [pc, #40]	; (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <__libc_init_array+0x44>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08003388 	.word	0x08003388
 8003340:	08003388 	.word	0x08003388
 8003344:	08003388 	.word	0x08003388
 8003348:	0800338c 	.word	0x0800338c

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
